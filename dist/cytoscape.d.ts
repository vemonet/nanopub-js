export declare const cytoscapeGetConfig: (rdf: string) => {
    style: ({
        selector: string;
        style: {
            label: string;
            color: string;
            'line-color': string;
            width: number;
            'arrow-scale': number;
            'target-arrow-color': string;
            'text-wrap': "wrap";
            'font-size': string;
            'text-opacity': number;
            'target-arrow-shape': "triangle";
            'curve-style': "bezier";
            'control-point-step-size': number;
            'overflow-wrap'?: undefined;
            'text-max-width'?: undefined;
            'text-valign'?: undefined;
            'text-halign'?: undefined;
            height?: undefined;
            padding?: undefined;
            shape?: undefined;
            'background-color'?: undefined;
        };
    } | {
        selector: string;
        style: {
            color: string;
            'line-color': string;
            width: number;
            'arrow-scale': number;
            'target-arrow-color': string;
            label?: undefined;
            'text-wrap'?: undefined;
            'font-size'?: undefined;
            'text-opacity'?: undefined;
            'target-arrow-shape'?: undefined;
            'curve-style'?: undefined;
            'control-point-step-size'?: undefined;
            'overflow-wrap'?: undefined;
            'text-max-width'?: undefined;
            'text-valign'?: undefined;
            'text-halign'?: undefined;
            height?: undefined;
            padding?: undefined;
            shape?: undefined;
            'background-color'?: undefined;
        };
    } | {
        selector: string;
        style: {
            label: string;
            'text-wrap': "wrap";
            'overflow-wrap': string;
            'text-max-width': string;
            'font-size': string;
            'text-valign': "data(valign)";
            'text-halign': "center";
            width: string;
            height: string;
            padding: string;
            shape: string;
            'background-color': string;
            color: string;
            'line-color'?: undefined;
            'arrow-scale'?: undefined;
            'target-arrow-color'?: undefined;
            'text-opacity'?: undefined;
            'target-arrow-shape'?: undefined;
            'curve-style'?: undefined;
            'control-point-step-size'?: undefined;
        };
    })[];
    elements: Promise<any>;
    layout: {
        name: string;
        ready: () => void;
        stop: () => void;
        quality: string;
        nodeDimensionsIncludeLabels: boolean;
        refresh: number;
        fit: boolean;
        padding: number;
        randomize: boolean;
        nodeRepulsion: number;
        idealEdgeLength: number;
        edgeElasticity: number;
        nestingFactor: number;
        gravity: number;
        numIter: number;
        tile: boolean;
        animate: boolean;
        animationDuration: number;
        tilingPaddingVertical: number;
        tilingPaddingHorizontal: number;
        gravityRangeCompound: number;
        gravityCompound: number;
        gravityRange: number;
        initialEnergyOnIncremental: number;
    };
    boxSelectionEnabled: boolean;
    autounselectify: boolean;
    autoungrabify: boolean;
    wheelSensitivity: number;
    showOverlay: boolean;
};
export declare const nanopubToCytoscapeElems: (rdf: string) => Promise<any>;
export declare const replacePrefix: (uri: string, prefixes: any) => string;
export declare const displayLink: (urlString: string) => string;
export declare const cytoscapeHighlightConnectedEdges: (e: any, cy: any) => void;
export declare const cytoscapeShowNodeOnClick: (e: any) => void;
export declare const defaultCytoscapeStyle: ({
    selector: string;
    style: {
        label: string;
        color: string;
        'line-color': string;
        width: number;
        'arrow-scale': number;
        'target-arrow-color': string;
        'text-wrap': "wrap";
        'font-size': string;
        'text-opacity': number;
        'target-arrow-shape': "triangle";
        'curve-style': "bezier";
        'control-point-step-size': number;
        'overflow-wrap'?: undefined;
        'text-max-width'?: undefined;
        'text-valign'?: undefined;
        'text-halign'?: undefined;
        height?: undefined;
        padding?: undefined;
        shape?: undefined;
        'background-color'?: undefined;
    };
} | {
    selector: string;
    style: {
        color: string;
        'line-color': string;
        width: number;
        'arrow-scale': number;
        'target-arrow-color': string;
        label?: undefined;
        'text-wrap'?: undefined;
        'font-size'?: undefined;
        'text-opacity'?: undefined;
        'target-arrow-shape'?: undefined;
        'curve-style'?: undefined;
        'control-point-step-size'?: undefined;
        'overflow-wrap'?: undefined;
        'text-max-width'?: undefined;
        'text-valign'?: undefined;
        'text-halign'?: undefined;
        height?: undefined;
        padding?: undefined;
        shape?: undefined;
        'background-color'?: undefined;
    };
} | {
    selector: string;
    style: {
        label: string;
        'text-wrap': "wrap";
        'overflow-wrap': string;
        'text-max-width': string;
        'font-size': string;
        'text-valign': "data(valign)";
        'text-halign': "center";
        width: string;
        height: string;
        padding: string;
        shape: string;
        'background-color': string;
        color: string;
        'line-color'?: undefined;
        'arrow-scale'?: undefined;
        'target-arrow-color'?: undefined;
        'text-opacity'?: undefined;
        'target-arrow-shape'?: undefined;
        'curve-style'?: undefined;
        'control-point-step-size'?: undefined;
    };
})[];
export declare const layoutsConfig: {
    'cose-bilkent': {
        name: string;
        ready: () => void;
        stop: () => void;
        quality: string;
        nodeDimensionsIncludeLabels: boolean;
        refresh: number;
        fit: boolean;
        padding: number;
        randomize: boolean;
        nodeRepulsion: number;
        idealEdgeLength: number;
        edgeElasticity: number;
        nestingFactor: number;
        gravity: number;
        numIter: number;
        tile: boolean;
        animate: boolean;
        animationDuration: number;
        tilingPaddingVertical: number;
        tilingPaddingHorizontal: number;
        gravityRangeCompound: number;
        gravityCompound: number;
        gravityRange: number;
        initialEnergyOnIncremental: number;
    };
};
//# sourceMappingURL=cytoscape.d.ts.map