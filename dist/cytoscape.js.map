{"version":3,"file":"cytoscape.js","sourceRoot":"","sources":["../src/cytoscape.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,IAAI,CAAC;AAG1B,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAW,EAAE,EAAE;IAChD,OAAO;QACL,KAAK,EAAE,qBAAqB;QAC5B,QAAQ,EAAE,uBAAuB,CAAC,GAAG,CAAC;QACtC,MAAM,EAAE,aAAa,CAAC,cAAc,CAAC;QACrC,mBAAmB,EAAE,IAAI;QACzB,eAAe,EAAE,IAAI;QACrB,aAAa,EAAE,KAAK;QACpB,gBAAgB,EAAE,GAAG;QACrB,WAAW,EAAE,IAAI;KAClB,CAAC;AACJ,CAAC,CAAA;AAGD,MAAM,CAAC,MAAM,uBAAuB,GAAG,KAAK,EAAE,GAAW,EAAE,EAAE;IAC3D,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,EAAC,MAAM,EAAE,kBAAkB,EAAC,CAAC,CAAC;IACxD,MAAM,cAAc,GAAQ,EAAE,CAAC;IAC/B,MAAM,MAAM,GAAQ,EAAE,CAAC;IAEvB,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,KAAU,EAAE,IAAS,EAAE,QAAa,EAAO,EAAE;QAC9D,IAAI,KAAK,EAAE;YACT,OAAO,CAAC,GAAG,CAAC,uDAAuD,EAAE,KAAK,CAAC,CAAC;YAC5E,OAAO,IAAI,CAAC;SACb;QACD,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;YAGnD,cAAc,CAAC,IAAI,CAAC;gBAClB,IAAI,EAAE;oBACJ,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;oBACtB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;oBACzB,KAAK,EAAE,SAAS;oBAChB,eAAe,EAAE,SAAS;oBAE1B,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;oBACxB,MAAM,EAAE,QAAQ;oBAChB,QAAQ,EAAE,MAAM;oBAChB,UAAU,EAAE,KAAK;oBACjB,SAAS,EAAE,SAAS;iBAErB;aACF,CAAC,CAAC;YAEH,MAAM,aAAa,GACjB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG;gBAChE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC;gBAC/C,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACxB,cAAc,CAAC,IAAI,CAAC;gBAClB,IAAI,EAAE;oBACJ,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;oBACrB,KAAK,EAAE,aAAa;oBACpB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,iBAAiB;oBAC1E,eAAe,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,IAAI,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS;oBAC5E,SAAS,EAAE,SAAS;oBAEpB,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;oBACxB,MAAM,EAAE,QAAQ;oBAChB,QAAQ,EAAE,MAAM;oBAChB,UAAU,EAAE,KAAK;iBAClB;aACF,CAAC,CAAC;YAEH,cAAc,CAAC,IAAI,CAAC;gBAClB,IAAI,EAAE;oBACJ,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;oBAC1B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;oBACzB,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK;iBAC5B;aACF,CAAC,CAAC;YAEH,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;SAC7C;aAAM;YAEL,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAS,EAAE,EAAE;gBACpC,IAAI,UAAU,GAAG,SAAS,CAAC;gBAC3B,IAAI,cAAc,GAAG,SAAS,CAAC;gBAC/B,IAAI,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;oBAE3B,UAAU,GAAG,SAAS,CAAC;oBACvB,cAAc,GAAG,SAAS,CAAC;iBAG5B;qBAAM,IAAI,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;oBAEnC,UAAU,GAAG,SAAS,CAAC;oBACvB,cAAc,GAAG,SAAS,CAAC;iBAC5B;qBAAM,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;oBAE9C,UAAU,GAAG,SAAS,CAAC;oBACvB,cAAc,GAAG,SAAS,CAAC;iBAC5B;gBAED,cAAc,CAAC,OAAO,CAAC;oBACrB,IAAI,EAAE;wBAEJ,EAAE,EAAE,CAAC;wBACL,KAAK,EAAE,CAAC;wBACR,KAAK,EAAE,iBAAiB;wBACxB,eAAe,EAAE,UAAU;wBAC3B,SAAS,EAAE,cAAc;wBACzB,MAAM,EAAE,KAAK;wBACb,QAAQ,EAAE,MAAM;wBAChB,UAAU,EAAE,KAAK;qBAClB;iBACF,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,MAAM,WAAW,GAAG,EAAC,GAAG,QAAQ,EAAE,GAAG,EAAE,6CAA6C,EAAC,CAAC;YAEtF,cAAc,CAAC,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE;gBAC/B,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;oBACnB,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;iBAC/D;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,GAAW,EAAE,QAAa,EAAE,EAAE;IAE1D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrD,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE;YACpC,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC;SACpD;KACF;IACD,OAAO,GAAG,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,SAAiB,EAAE,EAAE;IAC/C,IAAI,oCAAoC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;QACxD,OAAO,YAAY,SAAS;cAClB,SAAS;aACV,CAAC;KACX;SAAM;QACL,OAAO,SAAS,CAAC;KAClB;AACH,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,gCAAgC,GAAG,CAAC,CAAM,EAAE,EAAO,EAAE,EAAE;IAClE,EAAE,aAAF,EAAE,uBAAF,EAAE,CAAE,KAAK,GAAG,KAAK,CAAC;QAChB,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS;QAC3C,OAAO,EAAE,CAAC,EAAE,oBAAoB,EAAE,SAAS;QAC3C,WAAW,EAAE,MAAM;KACpB,CAAC,CAAC;IACH,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC;IACrB,GAAG,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC;QACzB,YAAY,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS;QAC3C,OAAO,EAAE,CAAC,EAAE,oBAAoB,EAAE,SAAS;QAC3C,WAAW,EAAE,MAAM;KACpB,CAAC,CAAC;AACL,CAAC,CAAA;AAGD,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,CAAM,EAAE,EAAE;IACjD,MAAM,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC;IACrB,GAAG,CAAC,MAAM,CAAC;QACT,OAAO,EAAE,GAAG,EAAE;YACZ,IAAI,MAAM,EAAE;gBAEV,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;aACvE;YACD,MAAM,GAAG,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAE1C,MAAM,YAAY,GAAG,GAAG,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;YAG3G,GAAG,CAAC,SAAS,GAAG;;;kBAGJ,WAAW,CAAC,YAAY,CAAC;eAC5B,CAAC;YACV,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC/B,OAAO,GAAG,CAAC;QACb,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAKF,MAAM,cAAc,GAAG,CAAC,CAAM,EAAE,EAAE;IAChC,MAAM,MAAM,GAAG,QAAQ,CAAC,cAAc,CAAC,cAAc,CAAC,CAAC;IAEvD,IAAI,MAAM,IAAI,MAAM,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,CAAA,EAAE;QAC3D,MAAM,CAAC,mBAAmB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QACpD,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,EAAE,CAAC;KAClB;AACH,CAAC,CAAC;AAGF,MAAM,CAAC,MAAM,qBAAqB,GAAG;IACnC;QACE,QAAQ,EAAE,MAAM;QAChB,KAAK,EAAE;YACL,KAAK,EAAE,aAAa;YACpB,KAAK,EAAE,SAAS;YAChB,YAAY,EAAE,SAAS;YACvB,KAAK,EAAE,CAAC;YACR,aAAa,EAAE,CAAC;YAChB,oBAAoB,EAAE,SAAS;YAE/B,WAAW,EAAE,MAAe;YAC5B,WAAW,EAAE,MAAM;YACnB,cAAc,EAAE,GAAG;YACnB,oBAAoB,EAAE,UAAmB;YAEzC,aAAa,EAAE,QAAiB;YAChC,yBAAyB,EAAE,GAAG;SAE/B;KACF;IACD;QACE,QAAQ,EAAE,aAAa;QACvB,KAAK,EAAE;YACL,KAAK,EAAE,SAAS;YAChB,YAAY,EAAE,SAAS;YACvB,KAAK,EAAE,CAAC;YACR,aAAa,EAAE,CAAC;YAChB,oBAAoB,EAAE,SAAS;SAEhC;KACF;IAOD;QACE,QAAQ,EAAE,MAAM;QAChB,KAAK,EAAE;YACL,KAAK,EAAE,aAAa;YACpB,WAAW,EAAE,MAAe;YAE5B,eAAe,EAAE,YAAY;YAE7B,gBAAgB,EAAE,OAAO;YACzB,WAAW,EAAE,gBAAgB;YAE7B,aAAa,EAAE,cAAuB;YACtC,aAAa,EAAE,QAAiB;YAChC,KAAK,EAAE,OAAO;YAEd,MAAM,EAAE,OAAO;YACf,OAAO,EAAE,MAAM;YAEf,KAAK,EAAE,aAAa;YACpB,kBAAkB,EAAE,uBAAuB;YAC3C,KAAK,EAAE,iBAAiB;SAEzB;KACF;CACF,CAAC;AAKF,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,cAAc,EAAE;QACd,IAAI,EAAE,cAAc;QAEpB,KAAK,EAAE,cAAa,CAAC;QAErB,IAAI,EAAE,cAAa,CAAC;QAKpB,OAAO,EAAE,SAAS;QAElB,2BAA2B,EAAE,KAAK;QAElC,OAAO,EAAE,EAAE;QAEX,GAAG,EAAE,IAAI;QAET,OAAO,EAAE,EAAE;QAEX,SAAS,EAAE,IAAI;QAEf,aAAa,EAAE,IAAI;QAEnB,eAAe,EAAE,GAAG;QAEpB,cAAc,EAAE,IAAI;QAEpB,aAAa,EAAE,GAAG;QAElB,OAAO,EAAE,IAAI;QAEb,OAAO,EAAE,IAAI;QAEb,IAAI,EAAE,IAAI;QAEV,OAAO,EAAE,KAAK;QAEd,iBAAiB,EAAE,GAAG;QAEtB,qBAAqB,EAAE,EAAE;QAEzB,uBAAuB,EAAE,EAAE;QAE3B,oBAAoB,EAAE,GAAG;QAEzB,eAAe,EAAE,GAAG;QAEpB,YAAY,EAAE,GAAG;QAEjB,0BAA0B,EAAE,GAAG;KAChC;CAsIF,CAAC","sourcesContent":["import {Parser} from 'n3';\n\n\nexport const cytoscapeGetConfig = (rdf: string) => {\n  return {\n    style: defaultCytoscapeStyle,\n    elements: nanopubToCytoscapeElems(rdf),\n    layout: layoutsConfig['cose-bilkent'],\n    boxSelectionEnabled: true,\n    autounselectify: true,\n    autoungrabify: false,\n    wheelSensitivity: 0.1,\n    showOverlay: true,\n  };\n}\n\n\nexport const nanopubToCytoscapeElems = async (rdf: string) => {\n  const parser = new Parser({format: 'application/trig'});\n  const cytoscapeElems: any = [];\n  const graphs: any = {};\n\n  parser.parse(rdf, (error: any, quad: any, prefixes: any): any => {\n    if (error) {\n      console.log('Error parsing the RDF with n3 to display in cytoscape', error);\n      return null;\n    }\n    if (quad && quad.subject.value && quad.object.value) {\n      // console.log(\"quad\", quad.object.termType)\n      // Subject and Object nodes\n      cytoscapeElems.push({\n        data: {\n          id: quad.subject.value,\n          label: quad.subject.value,\n          shape: 'ellipse',\n          backgroundColor: '#90caf9',\n          // parent: 'graph-' + quad.graph.value,\n          parent: quad.graph.value,\n          valign: 'center',\n          fontSize: '30px',\n          fontWeight: '300',\n          textColor: '#212121'\n          // https://stackoverflow.com/questions/58557196/group-nodes-together-in-cytoscape-js\n        }\n      });\n      // For literal that are too long without spaces, like public keys\n      const cutLongObject =\n        !quad.object.value.includes(' ') && quad.object.value.length > 100\n          ? quad.object.value.replace(/(.{60})/g, '$1\\n')\n          : quad.object.value;\n      cytoscapeElems.push({\n        data: {\n          id: quad.object.value,\n          label: cutLongObject,\n          shape: quad.object.termType == 'NamedNode' ? 'ellipse' : 'round-rectangle',\n          backgroundColor: quad.object.termType == 'NamedNode' ? '#90caf9' : '#80cbc4', // blue or green\n          textColor: '#000000', // black\n          // parent: 'graph-' + quad.graph.value,\n          parent: quad.graph.value,\n          valign: 'center',\n          fontSize: '30px',\n          fontWeight: '300'\n        }\n      });\n      // Add Predicate edge to cytoscape graph\n      cytoscapeElems.push({\n        data: {\n          source: quad.subject.value,\n          target: quad.object.value,\n          label: quad.predicate.value\n        }\n      });\n      // Add the graph to the list of graphs\n      graphs[quad.graph.value] = quad.graph.value;\n    } else {\n      // Define graphs color\n      Object.keys(graphs).map((g: string) => {\n        let graphColor = '#eceff1';\n        let graphTextColor = '#000000';\n        if (g.endsWith('assertion')) {\n          // blue\n          graphColor = '#e3f2fd';\n          graphTextColor = '#0d47a1';\n          // graphColor = npColor.assertion\n          // graphTextColor = npColor.assertion\n        } else if (g.endsWith('provenance')) {\n          // Red\n          graphColor = '#ffebee';\n          graphTextColor = '#b71c1c';\n        } else if (g.toLowerCase().endsWith('pubinfo')) {\n          // Yellow\n          graphColor = '#fffde7';\n          graphTextColor = '#f57f17';\n        }\n        // Add Graph node at start of cytoscape graph\n        cytoscapeElems.unshift({\n          data: {\n            // id: 'graph-' + g,\n            id: g,\n            label: g,\n            shape: 'round-rectangle',\n            backgroundColor: graphColor,\n            textColor: graphTextColor,\n            valign: 'top',\n            fontSize: '50px',\n            fontWeight: '700'\n          }\n        });\n      });\n\n      const allPrefixes = {...prefixes, rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'};\n      // Resolve prefixes\n      cytoscapeElems.map((elem: any) => {\n        if (elem.data.label) {\n          elem.data.label = replacePrefix(elem.data.label, allPrefixes);\n        }\n      });\n    }\n  });\n  // console.log('cytoscapeElems:', cytoscapeElems)\n  return cytoscapeElems;\n};\n\nexport const replacePrefix = (uri: string, prefixes: any) => {\n  // const namespace = (uri.lastIndexOf('#') > 0) ? uri.lastIndexOf('#') : uri.lastIndexOf('/')\n  for (let i = 0; i < Object.keys(prefixes).length; i++) {\n    const prefix = Object.keys(prefixes)[i];\n    if (uri.startsWith(prefixes[prefix])) {\n      return uri.replace(prefixes[prefix], prefix + ':');\n    }\n  }\n  return uri;\n};\n\nexport const displayLink = (urlString: string) => {\n  if (/^(?:node[0-9]+)|((https?|ftp):.*)$/.test(urlString)) {\n    return `<a href=\"${urlString}\" target=\"_blank\" rel=\"noopener noreferrer\" style=\"text-decoration: none;\">\n            ${urlString}\n        </a>`;\n  } else {\n    return urlString;\n  }\n};\n\n\nexport const cytoscapeHighlightConnectedEdges = (e: any, cy: any) => {\n  cy?.edges().style({\n    'line-color': '#263238', 'color': '#263238',\n    'width': 2, 'target-arrow-color': '#263238',\n    'font-size': '30px'\n  }); // Grey\n  const ele = e.target;\n  ele.connectedEdges().style({\n    'line-color': '#c62828', 'color': '#c62828', // red\n    'width': 4, 'target-arrow-color': '#c62828',\n    'font-size': '40px',\n  });\n}\n\n\nexport const cytoscapeShowNodeOnClick = (e: any) => {\n  const ele = e.target;\n  ele.popper({\n    content: () => {\n      if (window) {\n        // Handle when click out of the popper\n        setTimeout(() => window.addEventListener('click', handleClickOut), 0);\n      }\n      const div = document.createElement('div');\n      // Replace the start \"graph-http\" for graphs nodes URIs\n      const elementLabel = ele.id().startsWith('graph-http') ? ele.id().replace('graph-http', 'http') : ele.id();\n\n      // TODO: improve eceff1 eff1f1\n      div.innerHTML = `<div id=\"cytoscapePop\" class=\"cytoscapePopper\"\n          style=\"background: #eff1f1; padding: 8px; border-radius: 8px; border: 1px solid #ccc;\"\n        >\n          <span>${displayLink(elementLabel)}</span>\n        </div>`;\n      document.body.appendChild(div);\n      return div;\n    }\n  });\n};\n\n// /**\n//  * Close the popper showing the node content if click outside of it\n//  */\nconst handleClickOut = (e: any) => {\n  const popEle = document.getElementById('cytoscapePop');\n\n  if (window && popEle && !popEle?.contains(e.originalTarget)) {\n    window.removeEventListener('click', handleClickOut);\n    popEle?.remove();\n  }\n};\n\n\nexport const defaultCytoscapeStyle = [\n  {\n    selector: 'edge',\n    style: {\n      label: 'data(label)',\n      color: '#263238', // Grey\n      'line-color': '#263238',\n      width: 2,\n      'arrow-scale': 2,\n      'target-arrow-color': '#263238',\n      // 'target-arrow-color': '#ccc',\n      'text-wrap': 'wrap' as const,\n      'font-size': '30px',\n      'text-opacity': 0.9,\n      'target-arrow-shape': 'triangle' as const,\n      // Control multi edge on 2 nodes:\n      'curve-style': 'bezier' as const,\n      'control-point-step-size': 300\n      // width: 15\n    }\n  },\n  {\n    selector: 'edge:parent',\n    style: {\n      color: '#c62828', // red\n      'line-color': '#c62828',\n      width: 2,\n      'arrow-scale': 2,\n      'target-arrow-color': '#c62828'\n      // 'target-arrow-color': '#ccc',\n    }\n  },\n  // {\n  //   selector: 'edge.highlighted',\n  //   style: {\n  //     'color': '#0d47a1', // blue\n  //   }\n  // },\n  {\n    selector: 'node',\n    style: {\n      label: 'data(label)',\n      'text-wrap': 'wrap' as const,\n      // 'word-break': 'break-all',\n      'overflow-wrap': 'break-word',\n      // 'white-space': 'pre-wrap',\n      'text-max-width': '800px',\n      'font-size': 'data(fontSize)',\n      // 'font-weight': 'data(fontWeight)',\n      'text-valign': 'data(valign)' as const,\n      'text-halign': 'center' as const,\n      width: 'label',\n      // width: 20,\n      height: 'label',\n      padding: '25px',\n      // https://js.cytoscape.org/#style/node-body\n      shape: 'data(shape)',\n      'background-color': 'data(backgroundColor)',\n      color: 'data(textColor)'\n      // \"color\": 'data(color)',\n    }\n  }\n];\n\n\n// Change Cytoscape layout: https://js.cytoscape.org/#layouts\n// Layout options for dagre:\nexport const layoutsConfig = {\n  'cose-bilkent': {\n    name: 'cose-bilkent',\n    // Called on `layoutready`\n    ready: function () {},\n    // Called on `layoutstop`\n    stop: function () {},\n    // 'draft', 'default' or 'proof\"\n    // - 'draft' fast cooling rate\n    // - 'default' moderate cooling rate\n    // - \"proof\" slow cooling rate\n    quality: 'default',\n    // Whether to include labels in node dimensions. Useful for avoiding label overlap\n    nodeDimensionsIncludeLabels: false,\n    // number of ticks per frame; higher is faster but more jerky\n    refresh: 30,\n    // Whether to fit the network view after when done\n    fit: true,\n    // Padding on fit\n    padding: 10,\n    // Whether to enable incremental mode\n    randomize: true,\n    // Node repulsion (non overlapping) multiplier\n    nodeRepulsion: 4500,\n    // Ideal (intra-graph) edge length\n    idealEdgeLength: 200,\n    // Divisor to compute edge forces\n    edgeElasticity: 0.45,\n    // Nesting factor (multiplier) to compute ideal edge length for inter-graph edges\n    nestingFactor: 0.1,\n    // Gravity force (constant)\n    gravity: 0.25,\n    // Maximum number of iterations to perform\n    numIter: 2500,\n    // Whether to tile disconnected nodes\n    tile: true,\n    // Type of layout animation. The option set is {'during', 'end', false}\n    animate: false,\n    // Duration for animate:end\n    animationDuration: 500,\n    // Amount of vertical space to put between degree zero nodes during tiling (can also be a function)\n    tilingPaddingVertical: 10,\n    // Amount of horizontal space to put between degree zero nodes during tiling (can also be a function)\n    tilingPaddingHorizontal: 10,\n    // Gravity range (constant) for compounds\n    gravityRangeCompound: 1.5,\n    // Gravity force (constant) for compounds\n    gravityCompound: 1.0,\n    // Gravity range (constant)\n    gravityRange: 3.8,\n    // Initial cooling factor for incremental layout\n    initialEnergyOnIncremental: 0.5\n  }\n  // 'fcose': {\n  //     name: 'fcose',\n  //     // 'draft', 'default' or 'proof'\n  //     // - \"draft\" only applies spectral layout\n  //     // - \"default\" improves the quality with incremental layout (fast cooling rate)\n  //     // - \"proof\" improves the quality with incremental layout (slow cooling rate)\n  //     quality: \"default\",\n  //     // Use random node positions at beginning of layout\n  //     // if this is set to false, then quality option must be \"proof\"\n  //     randomize: true,\n  //     infinite: false,\n  //     // Whether or not to animate the layout\n  //     animate: false,\n  //     // Duration of animation in ms, if enabled\n  //     animationDuration: 1000,\n  //     // Easing of animation, if enabled\n  //     animationEasing: undefined,\n  //     // Fit the viewport to the repositioned nodes\n  //     fit: true,\n  //     // Padding around layout\n  //     padding: 30,\n  //     // Whether to include labels in node dimensions. Valid in \"proof\" quality\n  //     nodeDimensionsIncludeLabels: true,\n  //     // Whether or not simple nodes (non-compound nodes) are of uniform dimensions\n  //     uniformNodeDimensions: false,\n  //     // Whether to pack disconnected components - cytoscape-layout-utilities extension should be registered and initialized\n  //     packComponents: false,\n  //     // Layout step - all, transformed, enforced, cose - for debug purpose only\n  //     step: \"all\",\n  //     // False for random, true for greedy sampling\n  //     samplingType: true,\n  //     // Sample size to construct distance matrix\n  //     sampleSize: 25,\n  //     // Separation amount between nodes\n  //     nodeSeparation: 200,\n  //     // Power iteration tolerance\n  //     piTol: 0.0000001,\n  //     /* incremental layout options */\n  //     // Node repulsion (non overlapping) multiplier\n  //     nodeRepulsion: (node: any) => 4500,\n  //     // Ideal edge (non nested) length\n  //     idealEdgeLength: (edge: any) => 300,\n  //     // Divisor to compute edge forces\n  //     edgeElasticity: (edge: any) => 0.45,\n  //     // Nesting factor (multiplier) to compute ideal edge length for nested edges\n  //     nestingFactor: 0.4,\n  //     // Maximum number of iterations to perform - this is a suggested value and might be adjusted by the algorithm as required\n  //     numIter: 2500,\n  //     // For enabling tiling\n  //     tile: true,\n  //     // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)\n  //     tilingPaddingVertical: 10,\n  //     // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)\n  //     tilingPaddingHorizontal: 10,\n  //     // Gravity force (constant)\n  //     gravity: 0.25,\n  //     // Gravity range (constant) for compounds\n  //     gravityRangeCompound: 2,\n  //     // Gravity force (constant) for compounds\n  //     gravityCompound: 0.5,\n  //     // Gravity range (constant)\n  //     gravityRange: 3.8,\n  //     // Initial cooling factor for incremental layout\n  //     initialEnergyOnIncremental: 0.3,\n  //     /* constraint options */\n  //     // Fix desired nodes to predefined positions\n  //     // [{nodeId: 'n1', position: {x: 100, y: 200}}, {...}]\n  //     fixedNodeConstraint: undefined,\n  //     // Align desired nodes in vertical/horizontal direction\n  //     // {vertical: [['n1', 'n2'], [...]], horizontal: [['n2', 'n4'], [...]]}\n  //     alignmentConstraint: undefined,\n  //     // Place two nodes relatively in vertical/horizontal direction\n  //     // [{top: 'n1', bottom: 'n2', gap: 100}, {left: 'n3', right: 'n4', gap: 75}, {...}]\n  //     relativePlacementConstraint: undefined,\n  //     /* layout event callbacks */\n  //     // ready: () => {}, // on layoutready\n  //     // stop: () => {} // on layoutstop\n  // },\n  // 'dagre': {\n  //     name: 'dagre',\n  //     // dagre algo options, uses default value on undefined\n  //     nodeSep: undefined, // the separation between adjacent nodes in the same rank\n  //     edgeSep: undefined, // the separation between adjacent edges in the same rank\n  //     rankSep: undefined, // the separation between each rank in the layout\n  //     rankDir: 'TB', // 'TB' for top to bottom flow, 'LR' for left to right,\n  //     align: 'DR',  // alignment for rank nodes. Can be 'UL', 'UR', 'DL', or 'DR', where U = up, D = down, L = left, and R = right\n  //     acyclicer: undefined, // If set to 'greedy', uses a greedy heuristic for finding a feedback arc set for a graph.\n  //                         // A feedback arc set is a set of edges that can be removed to make a graph acyclic.\n  //     ranker: 'network-simplex', // Type of algorithm to assign a rank to each node in the input graph. Possible values: 'network-simplex', 'tight-tree' or 'longest-path'\n  //     minLen: function( edge: any ){ return 2; }, // number of ranks to keep between the source and target of the edge\n  //     edgeWeight: function( edge: any ){ return 1; }, // higher weight edges are generally made shorter and straighter than lower weight edges\n\n  //     // general layout options\n  //     fit: true, // whether to fit to viewport\n  //     padding: 30, // fit padding\n  //     spacingFactor: 1, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n  //     nodeDimensionsIncludeLabels: true, // whether labels should be included in determining the space used by a node\n  //     animate: false, // whether to transition the node positions\n  //     animateFilter: function( node: any, i: any ){ return true; }, // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions\n  //     animationDuration: 500, // duration of animation in ms if enabled\n  //     animationEasing: undefined, // easing of animation if enabled\n  //     boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  //     transform: function( node: any, pos: any ){ return pos; }, // a function that applies a transform to the final node position\n  //     ready: function(){}, // on layoutready\n  //     stop: function(){} // on layoutstop\n  // },\n  // 'cola': {\n  //     name: 'cola',\n  //     nodeSpacing: 150,\n  //     // edgeLengthVal: 1000,\n  //     animate: false,\n  //     randomize: false,\n  //     maxSimulationTime: 1500\n  // },\n  // // Spread: https://github.com/cytoscape/cytoscape.js-spread\n  // 'spread': {\n  //     name: 'spread',\n  //     animate: true, // Whether to show the layout as it's running\n  //     ready: undefined, // Callback on layoutready\n  //     stop: undefined, // Callback on layoutstop\n  //     fit: true, // Reset viewport to fit default simulationBounds\n  //     minDist: 20, // Minimum distance between nodes\n  //     padding: 20, // Padding\n  //     expandingFactor: -1.0, // If the network does not satisfy the minDist\n  //     // criterium then it expands the network of this amount\n  //     // If it is set to -1.0 the amount of expansion is automatically\n  //     // calculated based on the minDist, the aspect ratio and the\n  //     // number of nodes\n  //     prelayout: { name: 'cose' }, // Layout options for the first phase\n  //     maxExpandIterations: 4, // Maximum number of expanding iterations\n  //     boundingBox: undefined, // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n  //     randomize: false // Uses random initial node positions on true\n  // },\n};\n\n// export const npColor = {\n//   head: '#e8e8e8',\n//   assertion: '#99ccff',\n//   provenance: '#f3a08c',\n//   pubinfo: '#ffff66',\n//   error: '#f88b80',\n//   grey: '#d1d1d1',\n// };\n"]}