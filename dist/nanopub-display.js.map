{"version":3,"file":"nanopub-display.js","sources":["../node_modules/@lit/reactive-element/css-tag.js","../node_modules/@lit/reactive-element/reactive-element.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-element/lit-element.js","../node_modules/@lit/reactive-element/decorators/custom-element.js","../node_modules/@lit/reactive-element/decorators/property.js","../node_modules/@lit/reactive-element/decorators/state.js","../node_modules/@lit/reactive-element/decorators/query-assigned-elements.js","../node_modules/lit-html/directives/when.js","../node_modules/lit-html/directive.js","../node_modules/lit-html/directives/unsafe-html.js","../node_modules/lit-html/directives/style-map.js","../node_modules/n3/src/IRIs.js","../node_modules/queue-microtask/index.js","../node_modules/n3/src/N3Lexer.js","../node_modules/n3/src/N3Util.js","../node_modules/n3/src/N3DataFactory.js","../node_modules/n3/src/N3Parser.js","../node_modules/n3/src/N3Writer.js","../src/n3-writer.ts","../src/nanopub-display.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=window,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,s=Symbol(),n=new WeakMap;class o{constructor(t,e,n){if(this._$cssResult$=!0,n!==s)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const s=this.t;if(e&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=n.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&n.set(s,t))}return t}toString(){return this.cssText}}const r=t=>new o(\"string\"==typeof t?t:t+\"\",void 0,s),i=(t,...e)=>{const n=1===t.length?t[0]:e.reduce(((e,s,n)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(s)+t[n+1]),t[0]);return new o(n,t,s)},S=(s,n)=>{e?s.adoptedStyleSheets=n.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):n.forEach((e=>{const n=document.createElement(\"style\"),o=t.litNonce;void 0!==o&&n.setAttribute(\"nonce\",o),n.textContent=e.cssText,s.appendChild(n)}))},c=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const s of t.cssRules)e+=s.cssText;return r(e)})(t):t;export{o as CSSResult,S as adoptStyles,i as css,c as getCompatibleStyle,e as supportsAdoptingStyleSheets,r as unsafeCSS};\n//# sourceMappingURL=css-tag.js.map\n","import{getCompatibleStyle as t,adoptStyles as i}from\"./css-tag.js\";export{CSSResult,adoptStyles,css,getCompatibleStyle,supportsAdoptingStyleSheets,unsafeCSS}from\"./css-tag.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var s;const e=window,r=e.trustedTypes,h=r?r.emptyScript:\"\",o=e.reactiveElementPolyfillSupport,n={toAttribute(t,i){switch(i){case Boolean:t=t?h:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,i){let s=t;switch(i){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t)}catch(t){s=null}}return s}},a=(t,i)=>i!==t&&(i==i||t==t),l={attribute:!0,type:String,converter:n,reflect:!1,hasChanged:a};class d extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var i;this.finalize(),(null!==(i=this.h)&&void 0!==i?i:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((i,s)=>{const e=this._$Ep(s,i);void 0!==e&&(this._$Ev.set(e,s),t.push(e))})),t}static createProperty(t,i=l){if(i.state&&(i.attribute=!1),this.finalize(),this.elementProperties.set(t,i),!i.noAccessor&&!this.prototype.hasOwnProperty(t)){const s=\"symbol\"==typeof t?Symbol():\"__\"+t,e=this.getPropertyDescriptor(t,s,i);void 0!==e&&Object.defineProperty(this.prototype,t,e)}}static getPropertyDescriptor(t,i,s){return{get(){return this[i]},set(e){const r=this[t];this[i]=e,this.requestUpdate(t,r,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||l}static finalize(){if(this.hasOwnProperty(\"finalized\"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty(\"properties\")){const t=this.properties,i=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of i)this.createProperty(s,t[s])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(i){const s=[];if(Array.isArray(i)){const e=new Set(i.flat(1/0).reverse());for(const i of e)s.unshift(t(i))}else void 0!==i&&s.push(t(i));return s}static _$Ep(t,i){const s=i.attribute;return!1===s?void 0:\"string\"==typeof s?s:\"string\"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var i,s;(null!==(i=this._$ES)&&void 0!==i?i:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t))}removeController(t){var i;null===(i=this._$ES)||void 0===i||i.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,i)=>{this.hasOwnProperty(i)&&(this._$Ei.set(i,this[i]),delete this[i])}))}createRenderRoot(){var t;const s=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return i(s,this.constructor.elementStyles),s}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostConnected)||void 0===i?void 0:i.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostDisconnected)||void 0===i?void 0:i.call(t)}))}attributeChangedCallback(t,i,s){this._$AK(t,s)}_$EO(t,i,s=l){var e;const r=this.constructor._$Ep(t,s);if(void 0!==r&&!0===s.reflect){const h=(void 0!==(null===(e=s.converter)||void 0===e?void 0:e.toAttribute)?s.converter:n).toAttribute(i,s.type);this._$El=t,null==h?this.removeAttribute(r):this.setAttribute(r,h),this._$El=null}}_$AK(t,i){var s;const e=this.constructor,r=e._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=e.getPropertyOptions(r),h=\"function\"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(s=t.converter)||void 0===s?void 0:s.fromAttribute)?t.converter:n;this._$El=r,this[r]=h.fromAttribute(i,t.type),this._$El=null}}requestUpdate(t,i,s){let e=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||a)(this[t],i)?(this._$AL.has(t)||this._$AL.set(t,i),!0===s.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):e=!1),!this.isUpdatePending&&e&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,i)=>this[i]=t)),this._$Ei=void 0);let i=!1;const s=this._$AL;try{i=this.shouldUpdate(s),i?(this.willUpdate(s),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostUpdate)||void 0===i?void 0:i.call(t)})),this.update(s)):this._$Ek()}catch(t){throw i=!1,this._$Ek(),t}i&&this._$AE(s)}willUpdate(t){}_$AE(t){var i;null===(i=this._$ES)||void 0===i||i.forEach((t=>{var i;return null===(i=t.hostUpdated)||void 0===i?void 0:i.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,i)=>this._$EO(i,this[i],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}d.finalized=!0,d.elementProperties=new Map,d.elementStyles=[],d.shadowRootOptions={mode:\"open\"},null==o||o({ReactiveElement:d}),(null!==(s=e.reactiveElementVersions)&&void 0!==s?s:e.reactiveElementVersions=[]).push(\"1.6.1\");export{d as ReactiveElement,n as defaultConverter,a as notEqual};\n//# sourceMappingURL=reactive-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar t;const i=window,s=i.trustedTypes,e=s?s.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,o=`lit$${(Math.random()+\"\").slice(9)}$`,n=\"?\"+o,l=`<${n}>`,h=document,r=(t=\"\")=>h.createComment(t),d=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,u=Array.isArray,c=t=>u(t)||\"function\"==typeof(null==t?void 0:t[Symbol.iterator]),v=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,a=/-->/g,f=/>/g,_=RegExp(\">|[ \\t\\n\\f\\r](?:([^\\\\s\\\"'>=/]+)([ \\t\\n\\f\\r]*=[ \\t\\n\\f\\r]*(?:[^ \\t\\n\\f\\r\\\"'`<>=]|(\\\"|')|))|$)\",\"g\"),m=/'/g,p=/\"/g,$=/^(?:script|style|textarea|title)$/i,g=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),y=g(1),w=g(2),x=Symbol.for(\"lit-noChange\"),b=Symbol.for(\"lit-nothing\"),T=new WeakMap,A=h.createTreeWalker(h,129,null,!1),E=(t,i)=>{const s=t.length-1,n=[];let h,r=2===i?\"<svg>\":\"\",d=v;for(let i=0;i<s;i++){const s=t[i];let e,u,c=-1,g=0;for(;g<s.length&&(d.lastIndex=g,u=d.exec(s),null!==u);)g=d.lastIndex,d===v?\"!--\"===u[1]?d=a:void 0!==u[1]?d=f:void 0!==u[2]?($.test(u[2])&&(h=RegExp(\"</\"+u[2],\"g\")),d=_):void 0!==u[3]&&(d=_):d===_?\">\"===u[0]?(d=null!=h?h:v,c=-1):void 0===u[1]?c=-2:(c=d.lastIndex-u[2].length,e=u[1],d=void 0===u[3]?_:'\"'===u[3]?p:m):d===p||d===m?d=_:d===a||d===f?d=v:(d=_,h=void 0);const y=d===_&&t[i+1].startsWith(\"/>\")?\" \":\"\";r+=d===v?s+l:c>=0?(n.push(e),s.slice(0,c)+\"$lit$\"+s.slice(c)+o+y):s+o+(-2===c?(n.push(void 0),i):y)}const u=r+(t[s]||\"<?>\")+(2===i?\"</svg>\":\"\");if(!Array.isArray(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return[void 0!==e?e.createHTML(u):u,n]};class C{constructor({strings:t,_$litType$:i},e){let l;this.parts=[];let h=0,d=0;const u=t.length-1,c=this.parts,[v,a]=E(t,i);if(this.el=C.createElement(v,e),A.currentNode=this.el.content,2===i){const t=this.el.content,i=t.firstChild;i.remove(),t.append(...i.childNodes)}for(;null!==(l=A.nextNode())&&c.length<u;){if(1===l.nodeType){if(l.hasAttributes()){const t=[];for(const i of l.getAttributeNames())if(i.endsWith(\"$lit$\")||i.startsWith(o)){const s=a[d++];if(t.push(i),void 0!==s){const t=l.getAttribute(s.toLowerCase()+\"$lit$\").split(o),i=/([.?@])?(.*)/.exec(s);c.push({type:1,index:h,name:i[2],strings:t,ctor:\".\"===i[1]?M:\"?\"===i[1]?k:\"@\"===i[1]?H:S})}else c.push({type:6,index:h})}for(const i of t)l.removeAttribute(i)}if($.test(l.tagName)){const t=l.textContent.split(o),i=t.length-1;if(i>0){l.textContent=s?s.emptyScript:\"\";for(let s=0;s<i;s++)l.append(t[s],r()),A.nextNode(),c.push({type:2,index:++h});l.append(t[i],r())}}}else if(8===l.nodeType)if(l.data===n)c.push({type:2,index:h});else{let t=-1;for(;-1!==(t=l.data.indexOf(o,t+1));)c.push({type:7,index:h}),t+=o.length-1}h++}}static createElement(t,i){const s=h.createElement(\"template\");return s.innerHTML=t,s}}function P(t,i,s=t,e){var o,n,l,h;if(i===x)return i;let r=void 0!==e?null===(o=s._$Co)||void 0===o?void 0:o[e]:s._$Cl;const u=d(i)?void 0:i._$litDirective$;return(null==r?void 0:r.constructor)!==u&&(null===(n=null==r?void 0:r._$AO)||void 0===n||n.call(r,!1),void 0===u?r=void 0:(r=new u(t),r._$AT(t,s,e)),void 0!==e?(null!==(l=(h=s)._$Co)&&void 0!==l?l:h._$Co=[])[e]=r:s._$Cl=r),void 0!==r&&(i=P(t,r._$AS(t,i.values),r,e)),i}class V{constructor(t,i){this.u=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}v(t){var i;const{el:{content:s},parts:e}=this._$AD,o=(null!==(i=null==t?void 0:t.creationScope)&&void 0!==i?i:h).importNode(s,!0);A.currentNode=o;let n=A.nextNode(),l=0,r=0,d=e[0];for(;void 0!==d;){if(l===d.index){let i;2===d.type?i=new N(n,n.nextSibling,this,t):1===d.type?i=new d.ctor(n,d.name,d.strings,this,t):6===d.type&&(i=new I(n,this,t)),this.u.push(i),d=e[++r]}l!==(null==d?void 0:d.index)&&(n=A.nextNode(),l++)}return o}p(t){let i=0;for(const s of this.u)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class N{constructor(t,i,s,e){var o;this.type=2,this._$AH=b,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cm=null===(o=null==e?void 0:e.isConnected)||void 0===o||o}get _$AU(){var t,i;return null!==(i=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==i?i:this._$Cm}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=P(this,t,i),d(t)?t===b||null==t||\"\"===t?(this._$AH!==b&&this._$AR(),this._$AH=b):t!==this._$AH&&t!==x&&this.g(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):c(t)?this.k(t):this.g(t)}O(t,i=this._$AB){return this._$AA.parentNode.insertBefore(t,i)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}g(t){this._$AH!==b&&d(this._$AH)?this._$AA.nextSibling.data=t:this.T(h.createTextNode(t)),this._$AH=t}$(t){var i;const{values:s,_$litType$:e}=t,o=\"number\"==typeof e?this._$AC(t):(void 0===e.el&&(e.el=C.createElement(e.h,this.options)),e);if((null===(i=this._$AH)||void 0===i?void 0:i._$AD)===o)this._$AH.p(s);else{const t=new V(o,this),i=t.v(this.options);t.p(s),this.T(i),this._$AH=t}}_$AC(t){let i=T.get(t.strings);return void 0===i&&T.set(t.strings,i=new C(t)),i}k(t){u(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const o of t)e===i.length?i.push(s=new N(this.O(r()),this.O(r()),this,this.options)):s=i[e],s._$AI(o),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){var i;void 0===this._$AM&&(this._$Cm=t,null===(i=this._$AP)||void 0===i||i.call(this,t))}}class S{constructor(t,i,s,e,o){this.type=1,this._$AH=b,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=o,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=b}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,i=this,s,e){const o=this.strings;let n=!1;if(void 0===o)t=P(this,t,i,0),n=!d(t)||t!==this._$AH&&t!==x,n&&(this._$AH=t);else{const e=t;let l,h;for(t=o[0],l=0;l<o.length-1;l++)h=P(this,e[s+l],i,l),h===x&&(h=this._$AH[l]),n||(n=!d(h)||h!==this._$AH[l]),h===b?t=b:t!==b&&(t+=(null!=h?h:\"\")+o[l+1]),this._$AH[l]=h}n&&!e&&this.j(t)}j(t){t===b?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:\"\")}}class M extends S{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===b?void 0:t}}const R=s?s.emptyScript:\"\";class k extends S{constructor(){super(...arguments),this.type=4}j(t){t&&t!==b?this.element.setAttribute(this.name,R):this.element.removeAttribute(this.name)}}class H extends S{constructor(t,i,s,e,o){super(t,i,s,e,o),this.type=5}_$AI(t,i=this){var s;if((t=null!==(s=P(this,t,i,0))&&void 0!==s?s:b)===x)return;const e=this._$AH,o=t===b&&e!==b||t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive,n=t!==b&&(e===b||o);o&&this.element.removeEventListener(this.name,this,e),n&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var i,s;\"function\"==typeof this._$AH?this._$AH.call(null!==(s=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t)}}class I{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){P(this,t)}}const L={P:\"$lit$\",A:o,M:n,C:1,L:E,R:V,D:c,V:P,I:N,H:S,N:k,U:H,B:M,F:I},z=i.litHtmlPolyfillSupport;null==z||z(C,N),(null!==(t=i.litHtmlVersions)&&void 0!==t?t:i.litHtmlVersions=[]).push(\"2.6.1\");const Z=(t,i,s)=>{var e,o;const n=null!==(e=null==s?void 0:s.renderBefore)&&void 0!==e?e:i;let l=n._$litPart$;if(void 0===l){const t=null!==(o=null==s?void 0:s.renderBefore)&&void 0!==o?o:null;n._$litPart$=l=new N(i.insertBefore(r(),t),t,void 0,null!=s?s:{})}return l._$AI(t),l};export{L as _$LH,y as html,x as noChange,b as nothing,Z as render,w as svg};\n//# sourceMappingURL=lit-html.js.map\n","import{ReactiveElement as t}from\"@lit/reactive-element\";export*from\"@lit/reactive-element\";import{render as e,noChange as i}from\"lit-html\";export*from\"lit-html\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var l,o;const r=t;class s extends t{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=e(i,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return i}}s.finalized=!0,s._$litElement$=!0,null===(l=globalThis.litElementHydrateSupport)||void 0===l||l.call(globalThis,{LitElement:s});const n=globalThis.litElementPolyfillSupport;null==n||n({LitElement:s});const h={_$AK:(t,e,i)=>{t._$AK(e,i)},_$AL:t=>t._$AL};(null!==(o=globalThis.litElementVersions)&&void 0!==o?o:globalThis.litElementVersions=[]).push(\"3.2.2\");export{s as LitElement,r as UpdatingElement,h as _$LE};\n//# sourceMappingURL=lit-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e=e=>n=>\"function\"==typeof n?((e,n)=>(customElements.define(e,n),n))(e,n):((e,n)=>{const{kind:t,elements:s}=n;return{kind:t,elements:s,finisher(n){customElements.define(e,n)}}})(e,n);export{e as customElement};\n//# sourceMappingURL=custom-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst i=(i,e)=>\"method\"===e.kind&&e.descriptor&&!(\"value\"in e.descriptor)?{...e,finisher(n){n.createProperty(e.key,i)}}:{kind:\"field\",key:Symbol(),placement:\"own\",descriptor:{},originalKey:e.key,initializer(){\"function\"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(n){n.createProperty(e.key,i)}};function e(e){return(n,t)=>void 0!==t?((i,e,n)=>{e.constructor.createProperty(n,i)})(e,n,t):i(e,n)}export{e as property};\n//# sourceMappingURL=property.js.map\n","import{property as r}from\"./property.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */function t(t){return r({...t,state:!0})}export{t as state};\n//# sourceMappingURL=state.js.map\n","import{decorateProperty as o}from\"./base.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var n;const e=null!=(null===(n=window.HTMLSlotElement)||void 0===n?void 0:n.prototype.assignedElements)?(o,n)=>o.assignedElements(n):(o,n)=>o.assignedNodes(n).filter((o=>o.nodeType===Node.ELEMENT_NODE));function l(n){const{slot:l,selector:t}=null!=n?n:{};return o({descriptor:o=>({get(){var o;const r=\"slot\"+(l?`[name=${l}]`:\":not([name])\"),i=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(r),s=null!=i?e(i,n):[];return t?s.filter((o=>o.matches(t))):s},enumerable:!0,configurable:!0})})}export{l as queryAssignedElements};\n//# sourceMappingURL=query-assigned-elements.js.map\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nfunction n(n,o,r){return n?o():null==r?void 0:r()}export{n as when};\n//# sourceMappingURL=when.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},e=t=>(...e)=>({_$litDirective$:t,values:e});class i{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}export{i as Directive,t as PartType,e as directive};\n//# sourceMappingURL=directive.js.map\n","import{nothing as t,noChange as i}from\"../lit-html.js\";import{Directive as r,PartType as s,directive as n}from\"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends r{constructor(i){if(super(i),this.it=t,i.type!==s.CHILD)throw Error(this.constructor.directiveName+\"() can only be used in child bindings\")}render(r){if(r===t||null==r)return this._t=void 0,this.it=r;if(r===i)return r;if(\"string\"!=typeof r)throw Error(this.constructor.directiveName+\"() called with a non-string value\");if(r===this.it)return this._t;this.it=r;const s=[r];return s.raw=s,this._t={_$litType$:this.constructor.resultType,strings:s,values:[]}}}e.directiveName=\"unsafeHTML\",e.resultType=1;const o=n(e);export{e as UnsafeHTMLDirective,o as unsafeHTML};\n//# sourceMappingURL=unsafe-html.js.map\n","import{noChange as t}from\"../lit-html.js\";import{directive as e,Directive as r,PartType as s}from\"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const i=e(class extends r{constructor(t){var e;if(super(t),t.type!==s.ATTRIBUTE||\"style\"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error(\"The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.\")}render(t){return Object.keys(t).reduce(((e,r)=>{const s=t[r];return null==s?e:e+`${r=r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,\"-$&\").toLowerCase()}:${s};`}),\"\")}update(e,[r]){const{style:s}=e.element;if(void 0===this.vt){this.vt=new Set;for(const t in r)this.vt.add(t);return this.render(r)}this.vt.forEach((t=>{null==r[t]&&(this.vt.delete(t),t.includes(\"-\")?s.removeProperty(t):s[t]=\"\")}));for(const t in r){const e=r[t];null!=e&&(this.vt.add(t),t.includes(\"-\")?s.setProperty(t,e):s[t]=e)}return t}});export{i as styleMap};\n//# sourceMappingURL=style-map.js.map\n","const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    let currentLineLength = input.length;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (this._comments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          emitToken('comment', comment[1], '', this._line, whiteSpaceMatch[0].length);\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        currentLineLength = input.length;\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (this._comments && (comment = this._comment.exec(input)))\n            emitToken('comment', comment[1], '', this._line, input.length);\n          input = null;\n          emitToken('eof', '', '', this._line, 0);\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const length = matchLength || match[0].length;\n      const token = emitToken(type, value, prefix, line, length);\n      this.previousToken = token;\n      this._previousMarker = type;\n\n      // Advance to next part to tokenize\n      input = input.substr(length, input.length);\n    }\n\n    // Emits the token through the callback\n    function emitToken(type, value, prefix, line, length) {\n      const start = input ? currentLineLength - input.length : currentLineLength;\n      const end = start + length;\n      const token = { type, value, prefix, line, start, end };\n      callback(null, token);\n      return token;\n    }\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ### Strips off any starting UTF BOM mark.\n  _readStartingBom(input) {\n    return input.startsWith('\\ufeff') ? input.substr(1) : input;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = this._readStartingBom(input);\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            // Only read a BOM at the start\n            if (typeof this._input === 'undefined')\n              this._input = this._readStartingBom(typeof data === 'string' ? data : data.toString());\n            else\n              this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (typeof this._input === 'string')\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri.value || iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Implement hashCode for Immutable.js, since we implement `equals`\n  // https://immutable-js.com/docs/v4.0.0/ValueObject/#hashCode()\n  hashCode() {\n    return 0;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this._subject   = subject;\n    this._predicate = predicate;\n    this._object    = object;\n    this._graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  get subject() {\n    return this._subject;\n  }\n\n  get predicate() {\n    return this._predicate;\n  }\n\n  get object() {\n    return this._object;\n  }\n\n  get graph() {\n    return this._graph;\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this._subject.toJSON(),\n      predicate: this._predicate.toJSON(),\n      object:    this._object.toJSON(),\n      graph:     this._graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this._subject.equals(other.subject)     &&\n                      this._predicate.equals(other.predicate) &&\n                      this._object.equals(other.object)       &&\n                      this._graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      type,\n      subject, predicate, object, graph,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext(type, token) {\n    // Obtain the previous context\n    const context = this._contextStack.pop();\n    if (!context || context.type !== type)\n      return this._error(`Unexpected ${token.type}`, token);\n\n    // Restore the quad of the previous context\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n\n    // Restore N3 context settings\n    if (this._n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case '[':\n      if (this._n3Mode) {\n        // Start a new quad with a new blank node as subject\n        this._saveContext('blank', this._graph, this._subject,\n                          this._subject = this._blankNode(), null);\n        return this._readBlankNodeHead;\n      }\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext('blank', token);\n    // If the blank node was the object, restore previous context and read punctuation\n    if (this._object !== null)\n      return this._getContextEndReader();\n    // If the blank node was the predicate, continue reading the object\n    else if (this._predicate !== null)\n      return this._readObject;\n    // If the blank node was the subject, continue reading the predicate\n    else\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext('list', token);\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext('formula', token);\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext('item', token);\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext('<<', token);\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n      if (options.baseIRI) {\n        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)\n            }${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);\n        this._baseLength = options.baseIRI.length;\n      }\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist, /[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([_a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\nfunction escapeRegex(regex) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n","import {Writer, DataFactory} from 'n3';\n\n// cf. https://github.com/rdfjs/N3.js/blob/520054a9fb45ef48b5b58851449942493c57dace/src/N3Writer.js#L378\n\nconst escape = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n  escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n  escapedCharacters = {\n    '\\\\': '\\\\\\\\',\n    '\"': '\\\\\"',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n  };\n\nconst DEFAULTGRAPH = DataFactory.defaultGraph();\nconst aTagAttrs = `target=\"_blank\" rel=\"noopener noreferrer\"`;\n\nexport class NanopubWriter extends Writer {\n  // Stubs for TS to use parent class props and methods\n  _lists: any;\n  _baseMatcher: any;\n  _baseLength: any;\n  _prefixRegex: any;\n  _prefixIRIs: any;\n  _inDefaultGraph: any;\n  _graph: any;\n  _subject: any;\n  _predicate: any;\n  _blockedWrite: any;\n  _outputStream: any;\n  _endStream: any;\n  _encodeSubject: any;\n  _encodePredicate: any;\n  _encodeObject: any;\n  _write: any;\n\n  // `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity: any) {\n    // console.log(\"ENCODE!!\", entity, this._lists)\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && entity.value in this._lists)\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri)) iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    if (prefixMatch && !prefixMatch[2]) {\n      prefixMatch[2] = '';\n    }\n    return !prefixMatch\n      ? `<<a href=\"${iri}\" ${aTagAttrs}>${iri}</a>>`\n      : !prefixMatch[1]\n      ? iri\n      : `<a href=\"${iri}\" ${aTagAttrs}>${\n          this._prefixIRIs[prefixMatch[1]] + prefixMatch[2] || ':'\n        }</a>`;\n  }\n\n  _writeQuad(subject: any, predicate: any, object: any, graph: any, done: any) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // TODO: add divs with CSS classes for head, assertion, prov, pubinfo\n        const graphStr = graph.id.toString().toLowerCase();\n        let graphLabel = 'assertion';\n        if (graphStr.endsWith('head')) graphLabel = 'head';\n        if (graphStr.endsWith('provenance') || graphStr.endsWith('prov'))\n          graphLabel = 'provenance';\n        if (graphStr.endsWith('pubinfo')) graphLabel = 'pubinfo';\n\n        // Close the previous graph and start the new one\n        this._write(\n          (this._subject === null\n            ? ''\n            : this._inDefaultGraph\n            ? '.<br/>'\n            : ' .<br/>}</div>') +\n            (DEFAULTGRAPH.equals(graph)\n              ? ''\n              : `<div class=\"nanopub-graph\" id=\"nanopub-${graphLabel}\">${this._encodeIriOrBlank(\n                  graph\n                )} {<br/>`)\n        );\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(\n            ` ;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${this._encodePredicate(\n              (this._predicate = predicate)\n            )} ${this._encodeObject(object)}`,\n            done\n          );\n      } else {\n        // Different subject, write the whole quad\n        this._write(\n          `${\n            (this._subject === null ? '' : ' .<br/>') +\n            `&nbsp;&nbsp;&nbsp;&nbsp;` +\n            this._encodeSubject((this._subject = subject))\n          } ${this._encodePredicate(\n            (this._predicate = predicate)\n          )} ${this._encodeObject(object)}`,\n          done\n        );\n      }\n    } catch (error) {\n      done && done(error);\n    }\n  }\n\n  override addPrefixes(prefixes: any, done: any) {\n    // Ignore prefixes if not supported by the serialization\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.<br/>' : '<br/>}<br/>');\n      (this._subject = null), (this._graph = '');\n    }\n\n    if (!this._prefixIRIs) return done && done();\n    // Write all new prefixes\n    let hasPrefixes = false;\n    // let i = 0;\n    // const enoughPrefixes = Object.keys(prefixes).length > 1\n    for (let prefix in prefixes) {\n      // if (enoughPrefixes && i === 1) {\n      //   this._write('<div class=\"nanopub-prefixes\">');\n      // }\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string') iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      // if (this._subject !== null) {\n      //   this._write(this._inDefaultGraph ? '.<br/>' : '<br/>}<br/>');\n      //   this._subject = null, this._graph = '';\n      // }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = prefix += ':';\n      // this._write(`@prefix ${prefix} <<a href=\"${iri}\" ${aTagAttrs}>${iri}</a>> .`);\n\n      // if (enoughPrefixes && i === 0) {\n      //   this._write('<button @click=\"${this._expandPrefixes}\" class=\"nanopub-prefixes-button\">Show all prefixes</button>');\n      // }\n      // this._write(`<br/>`);\n      // i++\n    }\n    // if (enoughPrefixes) {\n    //   this._write('</div>');\n    // }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '',\n        prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist);\n      this._prefixRegex = new RegExp(\n        `^(?:${prefixList})[^\\/]*$|` +\n          `^(${IRIlist})([_a-zA-Z][\\\\-_a-zA-Z0-9]*)*$`\n      );\n    }\n    // End a prefix block with a newline\n    // this._write(hasPrefixes ? '' : '', done);\n  }\n\n  override end(done: any) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.<br/>' : ' .<br/>}</div>');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone =\n      done &&\n      ((error: any, result: any) => {\n        (singleDone = null), done(error, result);\n      });\n    if (this._endStream) {\n      try {\n        return this._outputStream.end(singleDone);\n      } catch (error) {\n        /* error closing stream */\n      }\n    }\n    singleDone && singleDone();\n  }\n}\n\nfunction escapeRegex(regex: any) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n\nfunction characterReplacer(character: any) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = (\n        (character.charCodeAt(0) - 0xd800) * 0x400 +\n        character.charCodeAt(1) +\n        0x2400\n      ).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n","import {LitElement, html, css} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\nimport {when} from 'lit/directives/when.js';\nimport {unsafeHTML} from 'lit/directives/unsafe-html.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\nimport {Parser, Quad} from 'n3';\nimport {NanopubWriter} from './n3-writer';\n\nconst npColor = {\n  head: css`#e8e8e8`,\n  assertion: css`#99ccff`,\n  provenance: css`#f3a08c`,\n  pubinfo: css`#ffff66`,\n  error: css`#f88b80`,\n  grey: css`#d1d1d1`,\n};\n\n/**\n * A component to display a Nanopublication.\n */\n@customElement('nanopub-display')\nexport class NanopubDisplay extends LitElement {\n  static override styles = css`\n    :host {\n      font-family: monaco, monospace;\n      font-size: 11pt;\n      color: #444;\n      display: flex;\n      height: 100%;\n      width: 100%;\n      word-break: break-all;\n      margin-bottom: 8px;\n    }\n    a {\n      color: #000;\n      text-decoration: none;\n    }\n    a:hover {\n      color: #666;\n    }\n    .nanopub {\n      height: 100%;\n      padding: 8px;\n      border-radius: 8px;\n      border: solid;\n      border-width: 1px;\n    }\n    .nanopub-graph {\n      padding: 8px;\n      margin-top: 8px;\n      border-radius: 8px;\n    }\n    #nanopub-prefixes {\n      display: none;\n    }\n    #nanopub-head {\n      display: none;\n      background: ${npColor.head};\n    }\n    #nanopub-assertion {\n      background: ${npColor.assertion};\n    }\n    #nanopub-provenance {\n      background: ${npColor.provenance};\n    }\n    #nanopub-pubinfo {\n      background: ${npColor.pubinfo};\n    }\n    .display-checklist {\n      font-family: sans-serif;\n      float: right;\n      font-size: 9pt;\n      background: ${npColor.head};\n      border-radius: 7px;\n      text-align: center;\n    }\n    .display-checklist .anchor-display-checklist {\n      position: relative;\n      display: inline-block;\n      text-decoration: none;\n      padding: 3px 8px;\n      border-radius: 7px;\n      cursor: help;\n    }\n    .display-checklist .anchor-display-checklist:hover {\n      background: ${npColor.grey};\n    }\n    .display-checklist-wrapper {\n      z-index: 1;\n      position: absolute;\n      margin-top: 1px;\n    }\n    .display-checklist ul.items {\n      position: relative;\n      min-width: 100px;\n      text-align: left;\n      width: max-content;\n      padding: 2px;\n      margin: 0;\n      border: 1px solid #ccc;\n      border-radius: 7px;\n      background: #fff;\n    }\n    .display-checklist ul.items li {\n      list-style: none;\n      margin-right: 8px;\n    }\n    .display-checklist label,\n    li,\n    input[type='checkbox'] {\n      cursor: pointer;\n    }\n  `;\n\n  /**\n   * The URL of the nanopublication to display\n   */\n  @property({type: String})\n  url = '';\n  /**\n   * The RDF string of the nanopublication to display. Will be downloaded from URL if not provided.\n   */\n  @property({type: String})\n  rdf = '';\n\n  /**\n   * Display the prefixes section, or not\n   */\n  @property({type: Boolean})\n  displayPrefixes = false;\n  /**\n   * Display the Head graph section, or not\n   */\n  @property({type: Boolean})\n  displayHead = false;\n  /**\n   * Display the PubInfo graph section, or not\n   */\n  @property({type: Boolean})\n  displayPubinfo = true;\n  /**\n   * Display the Provenance graph section, or not\n   */\n  @property({type: Boolean})\n  displayProvenance = true;\n  /**\n   * Display the Assertion graph section, or not\n   */\n  @property({type: Boolean})\n  displayAssertion = true;\n\n  /**\n   * Hide the PubInfo graph by default\n   */\n  @property({type: Boolean})\n  hidePubinfo = false;\n  /**\n   * Hide the Provenance graph by default\n   */\n  @property({type: Boolean})\n  hideProvenance = false;\n  /**\n   * Hide the Assertion graph by default\n   */\n  @property({type: Boolean})\n  hideAssertion = false;\n\n  /**\n   * Disable the button to change which sections of the nanopub are displayed\n   */\n  @property({type: Boolean})\n  disableDisplayButton = false;\n\n  /**\n   * Boolean to know if the window to change which sections of the nanopub are displayed is opened\n   */\n  @state()\n  showDisplayOptions = false;\n  /**\n   * The HTML generated from the RDF to display the nanopub\n   */\n  @state()\n  html_rdf?: any;\n  /**\n   * A dictionary with the prefixes and namespaces used in the nanopub\n   */\n  @state()\n  prefixes?: any;\n\n  /**\n   * Error message to show if there is a problem displaying the nanopub\n   */\n  @state()\n  error?: string;\n\n  /**\n   * Fetch the Nanopub if needed, parse the RDF TRiG using n3.js,\n   * and generate the HTML to represent the nanopub\n   */\n  override async connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.url && !this.rdf) {\n      this.error = `⚠️ No nanopublication has been provided, use the \"url\" or \"rdf\"\n        attribute to provide the URL, or RDF in the TRiG format, of the nanopublication.`;\n    }\n\n    if (!this.error && this.url && !this.rdf) {\n      if (\n        this.url.startsWith('https://purl.org/np/') &&\n        !this.url.endsWith('.trig')\n      ) {\n        this.url = this.url + '.trig';\n      }\n      try {\n        const response = await fetch(this.url);\n        this.rdf = await response.text();\n      } catch (error) {\n        this.error = `⚠️ Issue fetching the nanopublication RDF at ${this.url}. ${error}`;\n      }\n    }\n\n    // Parse the RDF with n3.js\n    if (!this.error && this.rdf) {\n      const parser = new Parser();\n      const writer = new NanopubWriter(null, {format: 'application/trig'});\n      const quadList: Quad[] = [];\n      parser.parse(this.rdf, (error: any, quad: Quad, prefixes: any): any => {\n        if (error) {\n          this.error = `⚠️ Issue parsing the nanopublication RDF with n3.js, make sure it is in the TRiG format. ${error}`;\n          return null;\n        }\n        if (quad) {\n          quadList.push(quad);\n        } else {\n          this.prefixes = {\n            this: prefixes['this'],\n            sub: prefixes['sub'],\n            ...prefixes,\n          };\n          writer.addPrefixes(this.prefixes, null);\n          // Add the quads to the writer after the prefixes\n          quadList.map((addQuad: Quad) => {\n            writer.addQuad(addQuad);\n          });\n          writer.end((_error: any, result: string) => {\n            this.html_rdf = unsafeHTML(result);\n            // this.html_rdf = html`${result}`\n            setTimeout(() => {\n              // Timeout 0 makes sure the div are loaded before updating the displayed sections\n              // TODO: use lifecycle firstUpdated() or updated()? https://lit.dev/docs/components/lifecycle/#reactive-update-cycle\n              this._applyDisplay('displayPrefixes');\n              this._applyDisplay('displayHead');\n              if (this.hidePubinfo) this.displayPubinfo = false;\n              this._applyDisplay('displayPubinfo');\n              if (this.hideProvenance) this.displayProvenance = false;\n              this._applyDisplay('displayProvenance');\n              if (this.hideAssertion) this.displayAssertion = false;\n              this._applyDisplay('displayAssertion');\n            }, 0);\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Apply display described in the state to a nanopub section in the HTML\n   */\n  _applyDisplay(displayProp: string) {\n    const displayLabel = displayProp.substring(7).toLowerCase();\n    const ele: HTMLElement | null = this.renderRoot.querySelector(\n      `#nanopub-${displayLabel}`\n    );\n    if (ele) {\n      ele.style.display = this[displayProp] ? 'inherit' : 'none';\n    }\n  }\n\n  /**\n   * Switch display of a nanopub section, called when checkbox clicked\n   */\n  _switchDisplay(displayProp: string) {\n    this[displayProp] = !this[displayProp];\n    this._applyDisplay(displayProp);\n  }\n\n  /**\n   * Open the dropdown window to select which nanopub section to display\n   */\n  _openDisplayOptions() {\n    this.showDisplayOptions = !this.showDisplayOptions;\n    if (window && this.showDisplayOptions) {\n      window.addEventListener('click', this._handleClickOut);\n    }\n  }\n\n  /**\n   * Close the display selection dropdown window if click outside of it\n   */\n  _handleClickOut = (e: any) => {\n    const ele: HTMLElement | null =\n      this.renderRoot.querySelector(`.display-checklist`);\n    if (window && !ele?.contains(e.originalTarget)) {\n      this.showDisplayOptions = false;\n      window.removeEventListener('click', this._handleClickOut);\n    }\n  };\n\n  override render() {\n    return html`\n      <div\n        class=\"nanopub\"\n        style=${styleMap({\n          'background-color': this.error ? npColor.error.toString() : 'inherit',\n        })}\n      >\n        ${when(this.prefixes, () => {\n          return html` @prefix ${Object.keys(this.prefixes)[0]} <<a\n              href=\"${this.prefixes[Object.keys(this.prefixes)[0]]}\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              >${this.prefixes[Object.keys(this.prefixes)[0]]}</a\n            >> .\n            ${!this.disableDisplayButton\n              ? html`<div class=\"display-checklist\" tabindex=\"100\">\n                  <span\n                    class=\"anchor-display-checklist\"\n                    @click=\"${() => this._openDisplayOptions()}\"\n                    @touchstart=\"${() => this._openDisplayOptions()}\"\n                  >\n                    ${displayIcon}\n                    ${this.showDisplayOptions\n                      ? html`Select the sections to display`\n                      : html``}\n                  </span>\n                  ${this.showDisplayOptions\n                    ? html`<div class=\"display-checklist-wrapper\">\n                        <ul class=\"items\" id=\"display-checklist-items\">\n                          <li\n                            id=\"displayPrefixes\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayPrefixes\"\n                                .checked=${this.displayPrefixes}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display prefixes\n                            </label>\n                          </li>\n                          <li\n                            id=\"displayHead\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayHead\"\n                                .checked=${this.displayHead}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display Head graph\n                            </label>\n                          </li>\n                          <li\n                            id=\"displayAssertion\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayAssertion\"\n                                .checked=${this.displayAssertion}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display Assertion graph\n                            </label>\n                          </li>\n                          <li\n                            id=\"displayProvenance\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayProvenance\"\n                                .checked=${this.displayProvenance}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display Provenance graph\n                            </label>\n                          </li>\n                          <li\n                            id=\"displayPubinfo\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayPubinfo\"\n                                .checked=${this.displayPubinfo}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display PubInfo graph\n                            </label>\n                          </li>\n                        </ul>\n                      </div>`\n                    : html``}\n                </div>`\n              : html``}\n            <br />\n\n            <div id=\"nanopub-prefixes\">\n              ${Object.keys(this.prefixes).map((prefix, i) => {\n                if (i === 0) {\n                  return html``;\n                }\n                return html`\n                  @prefix ${prefix} <<a\n                    href=\"${this.prefixes[prefix]}\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >${this.prefixes[prefix]}</a\n                  >> .\n                  <br />\n                `;\n              })}\n            </div>`;\n        })}\n        ${this.html_rdf\n          ? html`${this.html_rdf}`\n          : this.error\n          ? html`${this.error}`\n          : html`Loading...`}\n      </div>\n    `;\n  }\n}\n\nconst displayIcon = html`<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  height=\"16\"\n  width=\"16\"\n  viewBox=\"0 -80 1000 1000\"\n>\n  <path\n    d=\"M480.118 726Q551 726 600.5 676.382q49.5-49.617 49.5-120.5Q650 485 600.382 435.5q-49.617-49.5-120.5-49.5Q409 386 359.5 435.618q-49.5 49.617-49.5 120.5Q310 627 359.618 676.5q49.617 49.5 120.5 49.5Zm-.353-58Q433 668 400.5 635.265q-32.5-32.736-32.5-79.5Q368 509 400.735 476.5q32.736-32.5 79.5-32.5Q527 444 559.5 476.735q32.5 32.736 32.5 79.5Q592 603 559.265 635.5q-32.736 32.5-79.5 32.5ZM480 856q-146 0-264-83T40 556q58-134 176-217t264-83q146 0 264 83t176 217q-58 134-176 217t-264 83Zm0-300Zm-.169 240Q601 796 702.5 730.5 804 665 857 556q-53-109-154.331-174.5-101.332-65.5-222.5-65.5Q359 316 257.5 381.5 156 447 102 556q54 109 155.331 174.5 101.332 65.5 222.5 65.5Z\"\n  />\n</svg>`;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'nanopub-display': NanopubDisplay;\n  }\n}\n\n// declare namespace JSX {\n//   interface IntrinsicElements {\n//       \"nanopub-display\": React.DetailedHTMLProps<\n//           React.HTMLAttributes<HTMLElement>,\n//           HTMLElement\n//       > & {\n//           url?: string;\n//           rdf?: string;\n//       };\n//   }\n// }\n\ndeclare namespace LocalJSX {\n  interface NanopubDisplay {\n    /**\n     * The URL\n     */\n    url?: string;\n    /**\n     * The RDF\n     */\n    rdf?: string;\n  }\n  interface IntrinsicElements {\n    'nanopub-display': NanopubDisplay;\n  }\n}\nexport {LocalJSX as JSX};\n\n// declare module \"@stencil/core\" {\n//   export namespace JSX {\n//       interface IntrinsicElements {\n//           \"my-component\": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;\n//       }\n//   }\n// }\n"],"names":["t","e","s","n","o$4","r","o","i","S","c","h","a","l","d$1","d","u","v","f","_","m","p","$","g","y","x","b","T","A","E","C","M","k","H","P","V","N","I","R","z","Z","i$1","RDF","XSD","SWAP","namespaces","promise","queueMicrotask_1","global","cb","err","xsd","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","invalidRegExp","N3Lexer","options","key","callback","inputFinished","input","currentLineLength","whiteSpaceMatch","comment","emitToken","line","firstChar","type","value","prefix","match","matchLength","inconclusive","reportSyntaxError","length","token","start","end","self","item","invalid","replaced","sequence","unicode4","unicode8","escapedChar","charCode","opening","openingLength","closingPos","backslashCount","raw","lines","issue","queueMicrotask","tokens","error","data","isDefaultGraph","term","rdf","DEFAULTGRAPH","_blankNodeCounter","DataFactory","namedNode","blankNode","variable","literal","defaultGraph","quad","DataFactory$1","Term","id","other","NamedNode","Literal","atPos","dtPos","char","BlankNode","name","Variable","DefaultGraph","Quad","subject","predicate","object","graph","iri","languageOrDataType","datatype","blankNodePrefix","N3Parser","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","baseIRI","fragmentPos","n3Mode","context","quantifier","empty","list","next","previousList","stack","parent","listItem","completed","inversePredicate","prefixNode","entity","afterPath","contextStack","message","noop","result","pathStart","segmentStart","quadCallback","prefixCallback","quads","parser","factory","N3DataFactory","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","output","chunk","encoding","done","escapeRegex","string","characterReplacer","prefixMatch","prefixes","hasPrefixes","IRIlist","prefixList","prefixIRI","children","child","contents","elements","singleDone","character","regex","aTagAttrs","NanopubWriter","Writer","graphStr","graphLabel","npColor","css","NanopubDisplay","LitElement","ele","response","Parser","writer","quadList","addQuad","_error","unsafeHTML","displayProp","displayLabel","html","styleMap","when","displayIcon","__decorateClass","property","state","customElement"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]}