{"version":3,"file":"nanopub-display.min.js","sources":["../node_modules/@lit/reactive-element/css-tag.js","../node_modules/@lit/reactive-element/reactive-element.js","../node_modules/lit-html/lit-html.js","../node_modules/lit-element/lit-element.js","../node_modules/@lit/reactive-element/decorators/custom-element.js","../node_modules/@lit/reactive-element/decorators/property.js","../node_modules/@lit/reactive-element/decorators/state.js","../node_modules/@lit/reactive-element/decorators/query-assigned-elements.js","../node_modules/lit-html/directive.js","../node_modules/lit-html/directives/unsafe-html.js","../node_modules/lit-html/directives/style-map.js","../node_modules/n3/src/IRIs.js","../node_modules/queue-microtask/index.js","../node_modules/n3/src/N3Lexer.js","../node_modules/n3/src/N3DataFactory.js","../node_modules/n3/src/N3Parser.js","../node_modules/n3/src/N3Writer.js","../node_modules/n3/src/N3Util.js","../src/n3-writer.ts","../src/nanopub-display.ts","../node_modules/lit-html/directives/when.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t=window,e=t.ShadowRoot&&(void 0===t.ShadyCSS||t.ShadyCSS.nativeShadow)&&\"adoptedStyleSheets\"in Document.prototype&&\"replace\"in CSSStyleSheet.prototype,s=Symbol(),n=new WeakMap;class o{constructor(t,e,n){if(this._$cssResult$=!0,n!==s)throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const s=this.t;if(e&&void 0===t){const e=void 0!==s&&1===s.length;e&&(t=n.get(s)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),e&&n.set(s,t))}return t}toString(){return this.cssText}}const r=t=>new o(\"string\"==typeof t?t:t+\"\",void 0,s),i=(t,...e)=>{const n=1===t.length?t[0]:e.reduce(((e,s,n)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if(\"number\"==typeof t)return t;throw Error(\"Value passed to 'css' function must be a 'css' function result: \"+t+\". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\")})(s)+t[n+1]),t[0]);return new o(n,t,s)},S=(s,n)=>{e?s.adoptedStyleSheets=n.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):n.forEach((e=>{const n=document.createElement(\"style\"),o=t.litNonce;void 0!==o&&n.setAttribute(\"nonce\",o),n.textContent=e.cssText,s.appendChild(n)}))},c=e?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e=\"\";for(const s of t.cssRules)e+=s.cssText;return r(e)})(t):t;export{o as CSSResult,S as adoptStyles,i as css,c as getCompatibleStyle,e as supportsAdoptingStyleSheets,r as unsafeCSS};\n//# sourceMappingURL=css-tag.js.map\n","import{getCompatibleStyle as t,adoptStyles as i}from\"./css-tag.js\";export{CSSResult,adoptStyles,css,getCompatibleStyle,supportsAdoptingStyleSheets,unsafeCSS}from\"./css-tag.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var s;const e=window,r=e.trustedTypes,h=r?r.emptyScript:\"\",o=e.reactiveElementPolyfillSupport,n={toAttribute(t,i){switch(i){case Boolean:t=t?h:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,i){let s=t;switch(i){case Boolean:s=null!==t;break;case Number:s=null===t?null:Number(t);break;case Object:case Array:try{s=JSON.parse(t)}catch(t){s=null}}return s}},a=(t,i)=>i!==t&&(i==i||t==t),l={attribute:!0,type:String,converter:n,reflect:!1,hasChanged:a};class d extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this.u()}static addInitializer(t){var i;this.finalize(),(null!==(i=this.h)&&void 0!==i?i:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((i,s)=>{const e=this._$Ep(s,i);void 0!==e&&(this._$Ev.set(e,s),t.push(e))})),t}static createProperty(t,i=l){if(i.state&&(i.attribute=!1),this.finalize(),this.elementProperties.set(t,i),!i.noAccessor&&!this.prototype.hasOwnProperty(t)){const s=\"symbol\"==typeof t?Symbol():\"__\"+t,e=this.getPropertyDescriptor(t,s,i);void 0!==e&&Object.defineProperty(this.prototype,t,e)}}static getPropertyDescriptor(t,i,s){return{get(){return this[i]},set(e){const r=this[t];this[i]=e,this.requestUpdate(t,r,s)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||l}static finalize(){if(this.hasOwnProperty(\"finalized\"))return!1;this.finalized=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty(\"properties\")){const t=this.properties,i=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const s of i)this.createProperty(s,t[s])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(i){const s=[];if(Array.isArray(i)){const e=new Set(i.flat(1/0).reverse());for(const i of e)s.unshift(t(i))}else void 0!==i&&s.push(t(i));return s}static _$Ep(t,i){const s=i.attribute;return!1===s?void 0:\"string\"==typeof s?s:\"string\"==typeof t?t.toLowerCase():void 0}u(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var i,s;(null!==(i=this._$ES)&&void 0!==i?i:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(s=t.hostConnected)||void 0===s||s.call(t))}removeController(t){var i;null===(i=this._$ES)||void 0===i||i.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,i)=>{this.hasOwnProperty(i)&&(this._$Ei.set(i,this[i]),delete this[i])}))}createRenderRoot(){var t;const s=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return i(s,this.constructor.elementStyles),s}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostConnected)||void 0===i?void 0:i.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostDisconnected)||void 0===i?void 0:i.call(t)}))}attributeChangedCallback(t,i,s){this._$AK(t,s)}_$EO(t,i,s=l){var e;const r=this.constructor._$Ep(t,s);if(void 0!==r&&!0===s.reflect){const h=(void 0!==(null===(e=s.converter)||void 0===e?void 0:e.toAttribute)?s.converter:n).toAttribute(i,s.type);this._$El=t,null==h?this.removeAttribute(r):this.setAttribute(r,h),this._$El=null}}_$AK(t,i){var s;const e=this.constructor,r=e._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=e.getPropertyOptions(r),h=\"function\"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(s=t.converter)||void 0===s?void 0:s.fromAttribute)?t.converter:n;this._$El=r,this[r]=h.fromAttribute(i,t.type),this._$El=null}}requestUpdate(t,i,s){let e=!0;void 0!==t&&(((s=s||this.constructor.getPropertyOptions(t)).hasChanged||a)(this[t],i)?(this._$AL.has(t)||this._$AL.set(t,i),!0===s.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,s))):e=!1),!this.isUpdatePending&&e&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,i)=>this[i]=t)),this._$Ei=void 0);let i=!1;const s=this._$AL;try{i=this.shouldUpdate(s),i?(this.willUpdate(s),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var i;return null===(i=t.hostUpdate)||void 0===i?void 0:i.call(t)})),this.update(s)):this._$Ek()}catch(t){throw i=!1,this._$Ek(),t}i&&this._$AE(s)}willUpdate(t){}_$AE(t){var i;null===(i=this._$ES)||void 0===i||i.forEach((t=>{var i;return null===(i=t.hostUpdated)||void 0===i?void 0:i.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,i)=>this._$EO(i,this[i],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}d.finalized=!0,d.elementProperties=new Map,d.elementStyles=[],d.shadowRootOptions={mode:\"open\"},null==o||o({ReactiveElement:d}),(null!==(s=e.reactiveElementVersions)&&void 0!==s?s:e.reactiveElementVersions=[]).push(\"1.6.1\");export{d as ReactiveElement,n as defaultConverter,a as notEqual};\n//# sourceMappingURL=reactive-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar t;const i=window,s=i.trustedTypes,e=s?s.createPolicy(\"lit-html\",{createHTML:t=>t}):void 0,o=`lit$${(Math.random()+\"\").slice(9)}$`,n=\"?\"+o,l=`<${n}>`,h=document,r=(t=\"\")=>h.createComment(t),d=t=>null===t||\"object\"!=typeof t&&\"function\"!=typeof t,u=Array.isArray,c=t=>u(t)||\"function\"==typeof(null==t?void 0:t[Symbol.iterator]),v=/<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g,a=/-->/g,f=/>/g,_=RegExp(\">|[ \\t\\n\\f\\r](?:([^\\\\s\\\"'>=/]+)([ \\t\\n\\f\\r]*=[ \\t\\n\\f\\r]*(?:[^ \\t\\n\\f\\r\\\"'`<>=]|(\\\"|')|))|$)\",\"g\"),m=/'/g,p=/\"/g,$=/^(?:script|style|textarea|title)$/i,g=t=>(i,...s)=>({_$litType$:t,strings:i,values:s}),y=g(1),w=g(2),x=Symbol.for(\"lit-noChange\"),b=Symbol.for(\"lit-nothing\"),T=new WeakMap,A=h.createTreeWalker(h,129,null,!1),E=(t,i)=>{const s=t.length-1,n=[];let h,r=2===i?\"<svg>\":\"\",d=v;for(let i=0;i<s;i++){const s=t[i];let e,u,c=-1,g=0;for(;g<s.length&&(d.lastIndex=g,u=d.exec(s),null!==u);)g=d.lastIndex,d===v?\"!--\"===u[1]?d=a:void 0!==u[1]?d=f:void 0!==u[2]?($.test(u[2])&&(h=RegExp(\"</\"+u[2],\"g\")),d=_):void 0!==u[3]&&(d=_):d===_?\">\"===u[0]?(d=null!=h?h:v,c=-1):void 0===u[1]?c=-2:(c=d.lastIndex-u[2].length,e=u[1],d=void 0===u[3]?_:'\"'===u[3]?p:m):d===p||d===m?d=_:d===a||d===f?d=v:(d=_,h=void 0);const y=d===_&&t[i+1].startsWith(\"/>\")?\" \":\"\";r+=d===v?s+l:c>=0?(n.push(e),s.slice(0,c)+\"$lit$\"+s.slice(c)+o+y):s+o+(-2===c?(n.push(void 0),i):y)}const u=r+(t[s]||\"<?>\")+(2===i?\"</svg>\":\"\");if(!Array.isArray(t)||!t.hasOwnProperty(\"raw\"))throw Error(\"invalid template strings array\");return[void 0!==e?e.createHTML(u):u,n]};class C{constructor({strings:t,_$litType$:i},e){let l;this.parts=[];let h=0,d=0;const u=t.length-1,c=this.parts,[v,a]=E(t,i);if(this.el=C.createElement(v,e),A.currentNode=this.el.content,2===i){const t=this.el.content,i=t.firstChild;i.remove(),t.append(...i.childNodes)}for(;null!==(l=A.nextNode())&&c.length<u;){if(1===l.nodeType){if(l.hasAttributes()){const t=[];for(const i of l.getAttributeNames())if(i.endsWith(\"$lit$\")||i.startsWith(o)){const s=a[d++];if(t.push(i),void 0!==s){const t=l.getAttribute(s.toLowerCase()+\"$lit$\").split(o),i=/([.?@])?(.*)/.exec(s);c.push({type:1,index:h,name:i[2],strings:t,ctor:\".\"===i[1]?M:\"?\"===i[1]?k:\"@\"===i[1]?H:S})}else c.push({type:6,index:h})}for(const i of t)l.removeAttribute(i)}if($.test(l.tagName)){const t=l.textContent.split(o),i=t.length-1;if(i>0){l.textContent=s?s.emptyScript:\"\";for(let s=0;s<i;s++)l.append(t[s],r()),A.nextNode(),c.push({type:2,index:++h});l.append(t[i],r())}}}else if(8===l.nodeType)if(l.data===n)c.push({type:2,index:h});else{let t=-1;for(;-1!==(t=l.data.indexOf(o,t+1));)c.push({type:7,index:h}),t+=o.length-1}h++}}static createElement(t,i){const s=h.createElement(\"template\");return s.innerHTML=t,s}}function P(t,i,s=t,e){var o,n,l,h;if(i===x)return i;let r=void 0!==e?null===(o=s._$Co)||void 0===o?void 0:o[e]:s._$Cl;const u=d(i)?void 0:i._$litDirective$;return(null==r?void 0:r.constructor)!==u&&(null===(n=null==r?void 0:r._$AO)||void 0===n||n.call(r,!1),void 0===u?r=void 0:(r=new u(t),r._$AT(t,s,e)),void 0!==e?(null!==(l=(h=s)._$Co)&&void 0!==l?l:h._$Co=[])[e]=r:s._$Cl=r),void 0!==r&&(i=P(t,r._$AS(t,i.values),r,e)),i}class V{constructor(t,i){this.u=[],this._$AN=void 0,this._$AD=t,this._$AM=i}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}v(t){var i;const{el:{content:s},parts:e}=this._$AD,o=(null!==(i=null==t?void 0:t.creationScope)&&void 0!==i?i:h).importNode(s,!0);A.currentNode=o;let n=A.nextNode(),l=0,r=0,d=e[0];for(;void 0!==d;){if(l===d.index){let i;2===d.type?i=new N(n,n.nextSibling,this,t):1===d.type?i=new d.ctor(n,d.name,d.strings,this,t):6===d.type&&(i=new I(n,this,t)),this.u.push(i),d=e[++r]}l!==(null==d?void 0:d.index)&&(n=A.nextNode(),l++)}return o}p(t){let i=0;for(const s of this.u)void 0!==s&&(void 0!==s.strings?(s._$AI(t,s,i),i+=s.strings.length-2):s._$AI(t[i])),i++}}class N{constructor(t,i,s,e){var o;this.type=2,this._$AH=b,this._$AN=void 0,this._$AA=t,this._$AB=i,this._$AM=s,this.options=e,this._$Cm=null===(o=null==e?void 0:e.isConnected)||void 0===o||o}get _$AU(){var t,i;return null!==(i=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==i?i:this._$Cm}get parentNode(){let t=this._$AA.parentNode;const i=this._$AM;return void 0!==i&&11===t.nodeType&&(t=i.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,i=this){t=P(this,t,i),d(t)?t===b||null==t||\"\"===t?(this._$AH!==b&&this._$AR(),this._$AH=b):t!==this._$AH&&t!==x&&this.g(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):c(t)?this.k(t):this.g(t)}O(t,i=this._$AB){return this._$AA.parentNode.insertBefore(t,i)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}g(t){this._$AH!==b&&d(this._$AH)?this._$AA.nextSibling.data=t:this.T(h.createTextNode(t)),this._$AH=t}$(t){var i;const{values:s,_$litType$:e}=t,o=\"number\"==typeof e?this._$AC(t):(void 0===e.el&&(e.el=C.createElement(e.h,this.options)),e);if((null===(i=this._$AH)||void 0===i?void 0:i._$AD)===o)this._$AH.p(s);else{const t=new V(o,this),i=t.v(this.options);t.p(s),this.T(i),this._$AH=t}}_$AC(t){let i=T.get(t.strings);return void 0===i&&T.set(t.strings,i=new C(t)),i}k(t){u(this._$AH)||(this._$AH=[],this._$AR());const i=this._$AH;let s,e=0;for(const o of t)e===i.length?i.push(s=new N(this.O(r()),this.O(r()),this,this.options)):s=i[e],s._$AI(o),e++;e<i.length&&(this._$AR(s&&s._$AB.nextSibling,e),i.length=e)}_$AR(t=this._$AA.nextSibling,i){var s;for(null===(s=this._$AP)||void 0===s||s.call(this,!1,!0,i);t&&t!==this._$AB;){const i=t.nextSibling;t.remove(),t=i}}setConnected(t){var i;void 0===this._$AM&&(this._$Cm=t,null===(i=this._$AP)||void 0===i||i.call(this,t))}}class S{constructor(t,i,s,e,o){this.type=1,this._$AH=b,this._$AN=void 0,this.element=t,this.name=i,this._$AM=e,this.options=o,s.length>2||\"\"!==s[0]||\"\"!==s[1]?(this._$AH=Array(s.length-1).fill(new String),this.strings=s):this._$AH=b}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,i=this,s,e){const o=this.strings;let n=!1;if(void 0===o)t=P(this,t,i,0),n=!d(t)||t!==this._$AH&&t!==x,n&&(this._$AH=t);else{const e=t;let l,h;for(t=o[0],l=0;l<o.length-1;l++)h=P(this,e[s+l],i,l),h===x&&(h=this._$AH[l]),n||(n=!d(h)||h!==this._$AH[l]),h===b?t=b:t!==b&&(t+=(null!=h?h:\"\")+o[l+1]),this._$AH[l]=h}n&&!e&&this.j(t)}j(t){t===b?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:\"\")}}class M extends S{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===b?void 0:t}}const R=s?s.emptyScript:\"\";class k extends S{constructor(){super(...arguments),this.type=4}j(t){t&&t!==b?this.element.setAttribute(this.name,R):this.element.removeAttribute(this.name)}}class H extends S{constructor(t,i,s,e,o){super(t,i,s,e,o),this.type=5}_$AI(t,i=this){var s;if((t=null!==(s=P(this,t,i,0))&&void 0!==s?s:b)===x)return;const e=this._$AH,o=t===b&&e!==b||t.capture!==e.capture||t.once!==e.once||t.passive!==e.passive,n=t!==b&&(e===b||o);o&&this.element.removeEventListener(this.name,this,e),n&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var i,s;\"function\"==typeof this._$AH?this._$AH.call(null!==(s=null===(i=this.options)||void 0===i?void 0:i.host)&&void 0!==s?s:this.element,t):this._$AH.handleEvent(t)}}class I{constructor(t,i,s){this.element=t,this.type=6,this._$AN=void 0,this._$AM=i,this.options=s}get _$AU(){return this._$AM._$AU}_$AI(t){P(this,t)}}const L={P:\"$lit$\",A:o,M:n,C:1,L:E,R:V,D:c,V:P,I:N,H:S,N:k,U:H,B:M,F:I},z=i.litHtmlPolyfillSupport;null==z||z(C,N),(null!==(t=i.litHtmlVersions)&&void 0!==t?t:i.litHtmlVersions=[]).push(\"2.6.1\");const Z=(t,i,s)=>{var e,o;const n=null!==(e=null==s?void 0:s.renderBefore)&&void 0!==e?e:i;let l=n._$litPart$;if(void 0===l){const t=null!==(o=null==s?void 0:s.renderBefore)&&void 0!==o?o:null;n._$litPart$=l=new N(i.insertBefore(r(),t),t,void 0,null!=s?s:{})}return l._$AI(t),l};export{L as _$LH,y as html,x as noChange,b as nothing,Z as render,w as svg};\n//# sourceMappingURL=lit-html.js.map\n","import{ReactiveElement as t}from\"@lit/reactive-element\";export*from\"@lit/reactive-element\";import{render as e,noChange as i}from\"lit-html\";export*from\"lit-html\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var l,o;const r=t;class s extends t{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const i=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=e(i,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return i}}s.finalized=!0,s._$litElement$=!0,null===(l=globalThis.litElementHydrateSupport)||void 0===l||l.call(globalThis,{LitElement:s});const n=globalThis.litElementPolyfillSupport;null==n||n({LitElement:s});const h={_$AK:(t,e,i)=>{t._$AK(e,i)},_$AL:t=>t._$AL};(null!==(o=globalThis.litElementVersions)&&void 0!==o?o:globalThis.litElementVersions=[]).push(\"3.2.2\");export{s as LitElement,r as UpdatingElement,h as _$LE};\n//# sourceMappingURL=lit-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst e=e=>n=>\"function\"==typeof n?((e,n)=>(customElements.define(e,n),n))(e,n):((e,n)=>{const{kind:t,elements:s}=n;return{kind:t,elements:s,finisher(n){customElements.define(e,n)}}})(e,n);export{e as customElement};\n//# sourceMappingURL=custom-element.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst i=(i,e)=>\"method\"===e.kind&&e.descriptor&&!(\"value\"in e.descriptor)?{...e,finisher(n){n.createProperty(e.key,i)}}:{kind:\"field\",key:Symbol(),placement:\"own\",descriptor:{},originalKey:e.key,initializer(){\"function\"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(n){n.createProperty(e.key,i)}};function e(e){return(n,t)=>void 0!==t?((i,e,n)=>{e.constructor.createProperty(n,i)})(e,n,t):i(e,n)}export{e as property};\n//# sourceMappingURL=property.js.map\n","import{property as r}from\"./property.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */function t(t){return r({...t,state:!0})}export{t as state};\n//# sourceMappingURL=state.js.map\n","import{decorateProperty as o}from\"./base.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */var n;const e=null!=(null===(n=window.HTMLSlotElement)||void 0===n?void 0:n.prototype.assignedElements)?(o,n)=>o.assignedElements(n):(o,n)=>o.assignedNodes(n).filter((o=>o.nodeType===Node.ELEMENT_NODE));function l(n){const{slot:l,selector:t}=null!=n?n:{};return o({descriptor:o=>({get(){var o;const r=\"slot\"+(l?`[name=${l}]`:\":not([name])\"),i=null===(o=this.renderRoot)||void 0===o?void 0:o.querySelector(r),s=null!=i?e(i,n):[];return t?s.filter((o=>o.matches(t))):s},enumerable:!0,configurable:!0})})}export{l as queryAssignedElements};\n//# sourceMappingURL=query-assigned-elements.js.map\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},e=t=>(...e)=>({_$litDirective$:t,values:e});class i{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}export{i as Directive,t as PartType,e as directive};\n//# sourceMappingURL=directive.js.map\n","import{nothing as t,noChange as i}from\"../lit-html.js\";import{Directive as r,PartType as s,directive as n}from\"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */class e extends r{constructor(i){if(super(i),this.it=t,i.type!==s.CHILD)throw Error(this.constructor.directiveName+\"() can only be used in child bindings\")}render(r){if(r===t||null==r)return this._t=void 0,this.it=r;if(r===i)return r;if(\"string\"!=typeof r)throw Error(this.constructor.directiveName+\"() called with a non-string value\");if(r===this.it)return this._t;this.it=r;const s=[r];return s.raw=s,this._t={_$litType$:this.constructor.resultType,strings:s,values:[]}}}e.directiveName=\"unsafeHTML\",e.resultType=1;const o=n(e);export{e as UnsafeHTMLDirective,o as unsafeHTML};\n//# sourceMappingURL=unsafe-html.js.map\n","import{noChange as t}from\"../lit-html.js\";import{directive as e,Directive as r,PartType as s}from\"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */const i=e(class extends r{constructor(t){var e;if(super(t),t.type!==s.ATTRIBUTE||\"style\"!==t.name||(null===(e=t.strings)||void 0===e?void 0:e.length)>2)throw Error(\"The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.\")}render(t){return Object.keys(t).reduce(((e,r)=>{const s=t[r];return null==s?e:e+`${r=r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g,\"-$&\").toLowerCase()}:${s};`}),\"\")}update(e,[r]){const{style:s}=e.element;if(void 0===this.vt){this.vt=new Set;for(const t in r)this.vt.add(t);return this.render(r)}this.vt.forEach((t=>{null==r[t]&&(this.vt.delete(t),t.includes(\"-\")?s.removeProperty(t):s[t]=\"\")}));for(const t in r){const e=r[t];null!=e&&(this.vt.add(t),t.includes(\"-\")?s.setProperty(t,e):s[t]=e)}return t}});export{i as styleMap};\n//# sourceMappingURL=style-map.js.map\n","const RDF  = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n    XSD  = 'http://www.w3.org/2001/XMLSchema#',\n    SWAP = 'http://www.w3.org/2000/10/swap/';\n\nexport default {\n  xsd: {\n    decimal: `${XSD}decimal`,\n    boolean: `${XSD}boolean`,\n    double:  `${XSD}double`,\n    integer: `${XSD}integer`,\n    string:  `${XSD}string`,\n  },\n  rdf: {\n    type:       `${RDF}type`,\n    nil:        `${RDF}nil`,\n    first:      `${RDF}first`,\n    rest:       `${RDF}rest`,\n    langString: `${RDF}langString`,\n  },\n  owl: {\n    sameAs: 'http://www.w3.org/2002/07/owl#sameAs',\n  },\n  r: {\n    forSome: `${SWAP}reify#forSome`,\n    forAll:  `${SWAP}reify#forAll`,\n  },\n  log: {\n    implies: `${SWAP}log#implies`,\n  },\n};\n","/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\nlet promise\n\nmodule.exports = typeof queueMicrotask === 'function'\n  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)\n  // reuse resolved promise, and allocate it lazily\n  : cb => (promise || (promise = Promise.resolve()))\n    .then(cb)\n    .catch(err => setTimeout(() => { throw err }, 0))\n","// **N3Lexer** tokenizes N3 documents.\nimport namespaces from './IRIs';\nimport queueMicrotask from 'queue-microtask';\n\nconst { xsd } = namespaces;\n\n// Regular expression and replacement string to escape N3 strings\nconst escapeSequence = /\\\\u([a-fA-F0-9]{4})|\\\\U([a-fA-F0-9]{8})|\\\\([^])/g;\nconst escapeReplacements = {\n  '\\\\': '\\\\', \"'\": \"'\", '\"': '\"',\n  'n': '\\n', 'r': '\\r', 't': '\\t', 'f': '\\f', 'b': '\\b',\n  '_': '_', '~': '~', '.': '.', '-': '-', '!': '!', '$': '$', '&': '&',\n  '(': '(', ')': ')', '*': '*', '+': '+', ',': ',', ';': ';', '=': '=',\n  '/': '/', '?': '?', '#': '#', '@': '@', '%': '%',\n};\nconst illegalIriChars = /[\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]/;\n\nconst lineModeRegExps = {\n  _iri: true,\n  _unescapedIri: true,\n  _simpleQuotedString: true,\n  _langcode: true,\n  _blank: true,\n  _newline: true,\n  _comment: true,\n  _whitespace: true,\n  _endOfFile: true,\n};\nconst invalidRegExp = /$0^/;\n\n// ## Constructor\nexport default class N3Lexer {\n  constructor(options) {\n    // ## Regular expressions\n    // It's slightly faster to have these as properties than as in-scope variables\n    this._iri = /^<((?:[^ <>{}\\\\]|\\\\[uU])+)>[ \\t]*/; // IRI with escape sequences; needs sanity check after unescaping\n    this._unescapedIri = /^<([^\\x00-\\x20<>\\\\\"\\{\\}\\|\\^\\`]*)>[ \\t]*/; // IRI without escape sequences; no unescaping\n    this._simpleQuotedString = /^\"([^\"\\\\\\r\\n]*)\"(?=[^\"])/; // string without escape sequences\n    this._simpleApostropheString = /^'([^'\\\\\\r\\n]*)'(?=[^'])/;\n    this._langcode = /^@([a-z]+(?:-[a-z0-9]+)*)(?=[^a-z0-9\\-])/i;\n    this._prefix = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:(?=[#\\s<])/;\n    this._prefixed = /^((?:[A-Za-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)?:((?:(?:[0-:A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])(?:(?:[\\.\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~])*(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff]|%[0-9a-fA-F]{2}|\\\\[!#-\\/;=?\\-@_~]))?)?)(?:[ \\t]+|(?=\\.?[,;!\\^\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._variable = /^\\?(?:(?:[A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:[\\-0-:A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?=[.,;!\\^\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._blank = /^_:((?:[0-9A-Z_a-z\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02ff\\u0370-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])(?:\\.?[\\-0-9A-Z_a-z\\xb7\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u037d\\u037f-\\u1fff\\u200c\\u200d\\u203f\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\ud7ff\\uf900-\\ufdcf\\ufdf0-\\ufffd]|[\\ud800-\\udb7f][\\udc00-\\udfff])*)(?:[ \\t]+|(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>]))/;\n    this._number = /^[\\-+]?(?:(\\d+\\.\\d*|\\.?\\d+)[eE][\\-+]?|\\d*(\\.)?)\\d+(?=\\.?[,;:\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._boolean = /^(?:true|false)(?=[.,;\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._keyword = /^@[a-z]+(?=[\\s#<:])/i;\n    this._sparqlKeyword = /^(?:PREFIX|BASE|GRAPH)(?=[\\s#<])/i;\n    this._shortPredicates = /^a(?=[\\s#()\\[\\]\\{\\}\"'<>])/;\n    this._newline = /^[ \\t]*(?:#[^\\n\\r]*)?(?:\\r\\n|\\n|\\r)[ \\t]*/;\n    this._comment = /#([^\\n\\r]*)/;\n    this._whitespace = /^[ \\t]+/;\n    this._endOfFile = /^(?:#[^\\n\\r]*)?$/;\n    options = options || {};\n\n    // In line mode (N-Triples or N-Quads), only simple features may be parsed\n    if (this._lineMode = !!options.lineMode) {\n      this._n3Mode = false;\n      // Don't tokenize special literals\n      for (const key in this) {\n        if (!(key in lineModeRegExps) && this[key] instanceof RegExp)\n          this[key] = invalidRegExp;\n      }\n    }\n    // When not in line mode, enable N3 functionality by default\n    else {\n      this._n3Mode = options.n3 !== false;\n    }\n    // Don't output comment tokens by default\n    this._comments = !!options.comments;\n    // Cache the last tested closing position of long literals\n    this._literalClosingPos = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_tokenizeToEnd` tokenizes as for as possible, emitting tokens through the callback\n  _tokenizeToEnd(callback, inputFinished) {\n    // Continue parsing as far as possible; the loop will return eventually\n    let input = this._input;\n    let currentLineLength = input.length;\n    while (true) {\n      // Count and skip whitespace lines\n      let whiteSpaceMatch, comment;\n      while (whiteSpaceMatch = this._newline.exec(input)) {\n        // Try to find a comment\n        if (this._comments && (comment = this._comment.exec(whiteSpaceMatch[0])))\n          emitToken('comment', comment[1], '', this._line, whiteSpaceMatch[0].length);\n        // Advance the input\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n        currentLineLength = input.length;\n        this._line++;\n      }\n      // Skip whitespace on current line\n      if (!whiteSpaceMatch && (whiteSpaceMatch = this._whitespace.exec(input)))\n        input = input.substr(whiteSpaceMatch[0].length, input.length);\n\n      // Stop for now if we're at the end\n      if (this._endOfFile.test(input)) {\n        // If the input is finished, emit EOF\n        if (inputFinished) {\n          // Try to find a final comment\n          if (this._comments && (comment = this._comment.exec(input)))\n            emitToken('comment', comment[1], '', this._line, input.length);\n          input = null;\n          emitToken('eof', '', '', this._line, 0);\n        }\n        return this._input = input;\n      }\n\n      // Look for specific token types based on the first character\n      const line = this._line, firstChar = input[0];\n      let type = '', value = '', prefix = '',\n          match = null, matchLength = 0, inconclusive = false;\n      switch (firstChar) {\n      case '^':\n        // We need at least 3 tokens lookahead to distinguish ^^<IRI> and ^^pre:fixed\n        if (input.length < 3)\n          break;\n        // Try to match a type\n        else if (input[1] === '^') {\n          this._previousMarker = '^^';\n          // Move to type IRI or prefixed name\n          input = input.substr(2);\n          if (input[0] !== '<') {\n            inconclusive = true;\n            break;\n          }\n        }\n        // If no type, it must be a path expression\n        else {\n          if (this._n3Mode) {\n            matchLength = 1;\n            type = '^';\n          }\n          break;\n        }\n        // Fall through in case the type is an IRI\n      case '<':\n        // Try to find a full IRI without escape sequences\n        if (match = this._unescapedIri.exec(input))\n          type = 'IRI', value = match[1];\n        // Try to find a full IRI with escape sequences\n        else if (match = this._iri.exec(input)) {\n          value = this._unescape(match[1]);\n          if (value === null || illegalIriChars.test(value))\n            return reportSyntaxError(this);\n          type = 'IRI';\n        }\n        // Try to find a nested triple\n        else if (input.length > 1 && input[1] === '<')\n          type = '<<', matchLength = 2;\n        // Try to find a backwards implication arrow\n        else if (this._n3Mode && input.length > 1 && input[1] === '=')\n          type = 'inverse', matchLength = 2, value = '>';\n        break;\n\n      case '>':\n        if (input.length > 1 && input[1] === '>')\n          type = '>>', matchLength = 2;\n        break;\n\n      case '_':\n        // Try to find a blank node. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a blank node.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if ((match = this._blank.exec(input)) ||\n            inputFinished && (match = this._blank.exec(`${input} `)))\n          type = 'blank', prefix = '_', value = match[1];\n        break;\n\n      case '\"':\n        // Try to find a literal without escape sequences\n        if (match = this._simpleQuotedString.exec(input))\n          value = match[1];\n        // Try to find a literal wrapped in three pairs of quotes\n        else {\n          ({ value, matchLength } = this._parseLiteral(input));\n          if (value === null)\n            return reportSyntaxError(this);\n        }\n        if (match !== null || matchLength !== 0) {\n          type = 'literal';\n          this._literalClosingPos = 0;\n        }\n        break;\n\n      case \"'\":\n        if (!this._lineMode) {\n          // Try to find a literal without escape sequences\n          if (match = this._simpleApostropheString.exec(input))\n            value = match[1];\n          // Try to find a literal wrapped in three pairs of quotes\n          else {\n            ({ value, matchLength } = this._parseLiteral(input));\n            if (value === null)\n              return reportSyntaxError(this);\n          }\n          if (match !== null || matchLength !== 0) {\n            type = 'literal';\n            this._literalClosingPos = 0;\n          }\n        }\n        break;\n\n      case '?':\n        // Try to find a variable\n        if (this._n3Mode && (match = this._variable.exec(input)))\n          type = 'var', value = match[0];\n        break;\n\n      case '@':\n        // Try to find a language code\n        if (this._previousMarker === 'literal' && (match = this._langcode.exec(input)))\n          type = 'langcode', value = match[1];\n        // Try to find a keyword\n        else if (match = this._keyword.exec(input))\n          type = match[0];\n        break;\n\n      case '.':\n        // Try to find a dot as punctuation\n        if (input.length === 1 ? inputFinished : (input[1] < '0' || input[1] > '9')) {\n          type = '.';\n          matchLength = 1;\n          break;\n        }\n        // Fall through to numerical case (could be a decimal dot)\n\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '+':\n      case '-':\n        // Try to find a number. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a number.\n        // Therefore, try inserting a space if we're at the end of the input.\n        if (match = this._number.exec(input) ||\n            inputFinished && (match = this._number.exec(`${input} `))) {\n          type = 'literal', value = match[0];\n          prefix = (typeof match[1] === 'string' ? xsd.double :\n                    (typeof match[2] === 'string' ? xsd.decimal : xsd.integer));\n        }\n        break;\n\n      case 'B':\n      case 'b':\n      case 'p':\n      case 'P':\n      case 'G':\n      case 'g':\n        // Try to find a SPARQL-style keyword\n        if (match = this._sparqlKeyword.exec(input))\n          type = match[0].toUpperCase();\n        else\n          inconclusive = true;\n        break;\n\n      case 'f':\n      case 't':\n        // Try to match a boolean\n        if (match = this._boolean.exec(input))\n          type = 'literal', value = match[0], prefix = xsd.boolean;\n        else\n          inconclusive = true;\n        break;\n\n      case 'a':\n        // Try to find an abbreviated predicate\n        if (match = this._shortPredicates.exec(input))\n          type = 'abbreviation', value = 'a';\n        else\n          inconclusive = true;\n        break;\n\n      case '=':\n        // Try to find an implication arrow or equals sign\n        if (this._n3Mode && input.length > 1) {\n          type = 'abbreviation';\n          if (input[1] !== '>')\n            matchLength = 1, value = '=';\n          else\n            matchLength = 2, value = '>';\n        }\n        break;\n\n      case '!':\n        if (!this._n3Mode)\n          break;\n      case ',':\n      case ';':\n      case '[':\n      case ']':\n      case '(':\n      case ')':\n      case '{':\n      case '}':\n        if (!this._lineMode) {\n          matchLength = 1;\n          type = firstChar;\n        }\n        break;\n\n      default:\n        inconclusive = true;\n      }\n\n      // Some first characters do not allow an immediate decision, so inspect more\n      if (inconclusive) {\n        // Try to find a prefix\n        if ((this._previousMarker === '@prefix' || this._previousMarker === 'PREFIX') &&\n            (match = this._prefix.exec(input)))\n          type = 'prefix', value = match[1] || '';\n        // Try to find a prefixed name. Since it can contain (but not end with) a dot,\n        // we always need a non-dot character before deciding it is a prefixed name.\n        // Therefore, try inserting a space if we're at the end of the input.\n        else if ((match = this._prefixed.exec(input)) ||\n                 inputFinished && (match = this._prefixed.exec(`${input} `)))\n          type = 'prefixed', prefix = match[1] || '', value = this._unescape(match[2]);\n      }\n\n      // A type token is special: it can only be emitted after an IRI or prefixed name is read\n      if (this._previousMarker === '^^') {\n        switch (type) {\n        case 'prefixed': type = 'type';    break;\n        case 'IRI':      type = 'typeIRI'; break;\n        default:         type = '';\n        }\n      }\n\n      // What if nothing of the above was found?\n      if (!type) {\n        // We could be in streaming mode, and then we just wait for more input to arrive.\n        // Otherwise, a syntax error has occurred in the input.\n        // One exception: error on an unaccounted linebreak (= not inside a triple-quoted literal).\n        if (inputFinished || (!/^'''|^\"\"\"/.test(input) && /\\n|\\r/.test(input)))\n          return reportSyntaxError(this);\n        else\n          return this._input = input;\n      }\n\n      // Emit the parsed token\n      const length = matchLength || match[0].length;\n      const token = emitToken(type, value, prefix, line, length);\n      this.previousToken = token;\n      this._previousMarker = type;\n\n      // Advance to next part to tokenize\n      input = input.substr(length, input.length);\n    }\n\n    // Emits the token through the callback\n    function emitToken(type, value, prefix, line, length) {\n      const start = input ? currentLineLength - input.length : currentLineLength;\n      const end = start + length;\n      const token = { type, value, prefix, line, start, end };\n      callback(null, token);\n      return token;\n    }\n    // Signals the syntax error through the callback\n    function reportSyntaxError(self) { callback(self._syntaxError(/^\\S*/.exec(input)[0])); }\n  }\n\n  // ### `_unescape` replaces N3 escape codes by their corresponding characters\n  _unescape(item) {\n    let invalid = false;\n    const replaced = item.replace(escapeSequence, (sequence, unicode4, unicode8, escapedChar) => {\n      // 4-digit unicode character\n      if (typeof unicode4 === 'string')\n        return String.fromCharCode(Number.parseInt(unicode4, 16));\n      // 8-digit unicode character\n      if (typeof unicode8 === 'string') {\n        let charCode = Number.parseInt(unicode8, 16);\n        return charCode <= 0xFFFF ? String.fromCharCode(Number.parseInt(unicode8, 16)) :\n          String.fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));\n      }\n      // fixed escape sequence\n      if (escapedChar in escapeReplacements)\n        return escapeReplacements[escapedChar];\n      // invalid escape sequence\n      invalid = true;\n      return '';\n    });\n    return invalid ? null : replaced;\n  }\n\n  // ### `_parseLiteral` parses a literal into an unescaped value\n  _parseLiteral(input) {\n    // Ensure we have enough lookahead to identify triple-quoted strings\n    if (input.length >= 3) {\n      // Identify the opening quote(s)\n      const opening = input.match(/^(?:\"\"\"|\"|'''|'|)/)[0];\n      const openingLength = opening.length;\n\n      // Find the next candidate closing quotes\n      let closingPos = Math.max(this._literalClosingPos, openingLength);\n      while ((closingPos = input.indexOf(opening, closingPos)) > 0) {\n        // Count backslashes right before the closing quotes\n        let backslashCount = 0;\n        while (input[closingPos - backslashCount - 1] === '\\\\')\n          backslashCount++;\n\n        // An even number of backslashes (in particular 0)\n        // means these are actual, non-escaped closing quotes\n        if (backslashCount % 2 === 0) {\n          // Extract and unescape the value\n          const raw = input.substring(openingLength, closingPos);\n          const lines = raw.split(/\\r\\n|\\r|\\n/).length - 1;\n          const matchLength = closingPos + openingLength;\n          // Only triple-quoted strings can be multi-line\n          if (openingLength === 1 && lines !== 0 ||\n              openingLength === 3 && this._lineMode)\n            break;\n          this._line += lines;\n          return { value: this._unescape(raw), matchLength };\n        }\n        closingPos++;\n      }\n      this._literalClosingPos = input.length - openingLength + 1;\n    }\n    return { value: '', matchLength: 0 };\n  }\n\n  // ### `_syntaxError` creates a syntax error for the given issue\n  _syntaxError(issue) {\n    this._input = null;\n    const err = new Error(`Unexpected \"${issue}\" on line ${this._line}.`);\n    err.context = {\n      token: undefined,\n      line: this._line,\n      previousToken: this.previousToken,\n    };\n    return err;\n  }\n\n  // ### Strips off any starting UTF BOM mark.\n  _readStartingBom(input) {\n    return input.startsWith('\\ufeff') ? input.substr(1) : input;\n  }\n\n  // ## Public methods\n\n  // ### `tokenize` starts the transformation of an N3 document into an array of tokens.\n  // The input can be a string or a stream.\n  tokenize(input, callback) {\n    this._line = 1;\n\n    // If the input is a string, continuously emit tokens through the callback until the end\n    if (typeof input === 'string') {\n      this._input = this._readStartingBom(input);\n      // If a callback was passed, asynchronously call it\n      if (typeof callback === 'function')\n        queueMicrotask(() => this._tokenizeToEnd(callback, true));\n      // If no callback was passed, tokenize synchronously and return\n      else {\n        const tokens = [];\n        let error;\n        this._tokenizeToEnd((e, t) => e ? (error = e) : tokens.push(t), true);\n        if (error) throw error;\n        return tokens;\n      }\n    }\n    // Otherwise, the input must be a stream\n    else {\n      this._pendingBuffer = null;\n      if (typeof input.setEncoding === 'function')\n        input.setEncoding('utf8');\n      // Adds the data chunk to the buffer and parses as far as possible\n      input.on('data', data => {\n        if (this._input !== null && data.length !== 0) {\n          // Prepend any previous pending writes\n          if (this._pendingBuffer) {\n            data = Buffer.concat([this._pendingBuffer, data]);\n            this._pendingBuffer = null;\n          }\n          // Hold if the buffer ends in an incomplete unicode sequence\n          if (data[data.length - 1] & 0x80) {\n            this._pendingBuffer = data;\n          }\n          // Otherwise, tokenize as far as possible\n          else {\n            // Only read a BOM at the start\n            if (typeof this._input === 'undefined')\n              this._input = this._readStartingBom(typeof data === 'string' ? data : data.toString());\n            else\n              this._input += data;\n            this._tokenizeToEnd(callback, false);\n          }\n        }\n      });\n      // Parses until the end\n      input.on('end', () => {\n        if (typeof this._input === 'string')\n          this._tokenizeToEnd(callback, true);\n      });\n      input.on('error', callback);\n    }\n  }\n}\n","// N3.js implementations of the RDF/JS core data types\n// See https://github.com/rdfjs/representation-task-force/blob/master/interface-spec.md\n\nimport namespaces from './IRIs';\nimport { isDefaultGraph } from './N3Util';\nconst { rdf, xsd } = namespaces;\n\n// eslint-disable-next-line prefer-const\nlet DEFAULTGRAPH;\nlet _blankNodeCounter = 0;\n\nconst escapedLiteral = /^\"(.*\".*)(?=\"[^\"]*$)/;\nconst quadId = /^<<(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) (\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+) ?(\"(?:\"\"|[^\"])*\"[^ ]*|[^ ]+)?>>$/;\n\n// ## DataFactory singleton\nconst DataFactory = {\n  namedNode,\n  blankNode,\n  variable,\n  literal,\n  defaultGraph,\n  quad,\n  triple: quad,\n};\nexport default DataFactory;\n\n// ## Term constructor\nexport class Term {\n  constructor(id) {\n    this.id = id;\n  }\n\n  // ### The value of this term\n  get value() {\n    return this.id;\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Term)\n      return this.id === other.id;\n    // Otherwise, compare term type and value\n    return !!other && this.termType === other.termType &&\n                      this.value    === other.value;\n  }\n\n  // ### Implement hashCode for Immutable.js, since we implement `equals`\n  // https://immutable-js.com/docs/v4.0.0/ValueObject/#hashCode()\n  hashCode() {\n    return 0;\n  }\n\n  // ### Returns a plain object representation of this term\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n    };\n  }\n}\n\n\n// ## NamedNode constructor\nexport class NamedNode extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'NamedNode';\n  }\n}\n\n// ## Literal constructor\nexport class Literal extends Term {\n  // ### The term type of this term\n  get termType() {\n    return 'Literal';\n  }\n\n  // ### The text value of this literal\n  get value() {\n    return this.id.substring(1, this.id.lastIndexOf('\"'));\n  }\n\n  // ### The language of this literal\n  get language() {\n    // Find the last quotation mark (e.g., '\"abc\"@en-us')\n    const id = this.id;\n    let atPos = id.lastIndexOf('\"') + 1;\n    // If \"@\" it follows, return the remaining substring; empty otherwise\n    return atPos < id.length && id[atPos++] === '@' ? id.substr(atPos).toLowerCase() : '';\n  }\n\n  // ### The datatype IRI of this literal\n  get datatype() {\n    return new NamedNode(this.datatypeString);\n  }\n\n  // ### The datatype string of this literal\n  get datatypeString() {\n    // Find the last quotation mark (e.g., '\"abc\"^^http://ex.org/types#t')\n    const id = this.id, dtPos = id.lastIndexOf('\"') + 1;\n    const char = dtPos < id.length ? id[dtPos] : '';\n    // If \"^\" it follows, return the remaining substring\n    return char === '^' ? id.substr(dtPos + 2) :\n           // If \"@\" follows, return rdf:langString; xsd:string otherwise\n           (char !== '@' ? xsd.string : rdf.langString);\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both literals were created by this library,\n    // equality can be computed through ids\n    if (other instanceof Literal)\n      return this.id === other.id;\n    // Otherwise, compare term type, value, language, and datatype\n    return !!other && !!other.datatype &&\n                      this.termType === other.termType &&\n                      this.value    === other.value    &&\n                      this.language === other.language &&\n                      this.datatype.value === other.datatype.value;\n  }\n\n  toJSON() {\n    return {\n      termType: this.termType,\n      value:    this.value,\n      language: this.language,\n      datatype: { termType: 'NamedNode', value: this.datatypeString },\n    };\n  }\n}\n\n// ## BlankNode constructor\nexport class BlankNode extends Term {\n  constructor(name) {\n    super(`_:${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'BlankNode';\n  }\n\n  // ### The name of this blank node\n  get value() {\n    return this.id.substr(2);\n  }\n}\n\nexport class Variable extends Term {\n  constructor(name) {\n    super(`?${name}`);\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Variable';\n  }\n\n  // ### The name of this variable\n  get value() {\n    return this.id.substr(1);\n  }\n}\n\n// ## DefaultGraph constructor\nexport class DefaultGraph extends Term {\n  constructor() {\n    super('');\n    return DEFAULTGRAPH || this;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'DefaultGraph';\n  }\n\n  // ### Returns whether this object represents the same term as the other\n  equals(other) {\n    // If both terms were created by this library,\n    // equality can be computed through strict equality;\n    // otherwise, compare term types.\n    return (this === other) || (!!other && (this.termType === other.termType));\n  }\n}\n\n// ## DefaultGraph singleton\nDEFAULTGRAPH = new DefaultGraph();\n\n\n// ### Constructs a term from the given internal string ID\nexport function termFromId(id, factory) {\n  factory = factory || DataFactory;\n\n  // Falsy value or empty string indicate the default graph\n  if (!id)\n    return factory.defaultGraph();\n\n  // Identify the term type based on the first character\n  switch (id[0]) {\n  case '?':\n    return factory.variable(id.substr(1));\n  case '_':\n    return factory.blankNode(id.substr(2));\n  case '\"':\n    // Shortcut for internal literals\n    if (factory === DataFactory)\n      return new Literal(id);\n    // Literal without datatype or language\n    if (id[id.length - 1] === '\"')\n      return factory.literal(id.substr(1, id.length - 2));\n    // Literal with datatype or language\n    const endPos = id.lastIndexOf('\"', id.length - 1);\n    return factory.literal(id.substr(1, endPos - 1),\n            id[endPos + 1] === '@' ? id.substr(endPos + 2)\n                                   : factory.namedNode(id.substr(endPos + 3)));\n  case '<':\n    const components = quadId.exec(id);\n    return factory.quad(\n      termFromId(unescapeQuotes(components[1]), factory),\n      termFromId(unescapeQuotes(components[2]), factory),\n      termFromId(unescapeQuotes(components[3]), factory),\n      components[4] && termFromId(unescapeQuotes(components[4]), factory)\n    );\n  default:\n    return factory.namedNode(id);\n  }\n}\n\n// ### Constructs an internal string ID from the given term or ID string\nexport function termToId(term) {\n  if (typeof term === 'string')\n    return term;\n  if (term instanceof Term && term.termType !== 'Quad')\n    return term.id;\n  if (!term)\n    return DEFAULTGRAPH.id;\n\n  // Term instantiated with another library\n  switch (term.termType) {\n  case 'NamedNode':    return term.value;\n  case 'BlankNode':    return `_:${term.value}`;\n  case 'Variable':     return `?${term.value}`;\n  case 'DefaultGraph': return '';\n  case 'Literal':      return `\"${term.value}\"${\n    term.language ? `@${term.language}` :\n      (term.datatype && term.datatype.value !== xsd.string ? `^^${term.datatype.value}` : '')}`;\n  case 'Quad':\n    // To identify RDF* quad components, we escape quotes by doubling them.\n    // This avoids the overhead of backslash parsing of Turtle-like syntaxes.\n    return `<<${\n        escapeQuotes(termToId(term.subject))\n      } ${\n        escapeQuotes(termToId(term.predicate))\n      } ${\n        escapeQuotes(termToId(term.object))\n      }${\n        (isDefaultGraph(term.graph)) ? '' : ` ${termToId(term.graph)}`\n      }>>`;\n  default: throw new Error(`Unexpected termType: ${term.termType}`);\n  }\n}\n\n\n// ## Quad constructor\nexport class Quad extends Term {\n  constructor(subject, predicate, object, graph) {\n    super('');\n    this._subject   = subject;\n    this._predicate = predicate;\n    this._object    = object;\n    this._graph     = graph || DEFAULTGRAPH;\n  }\n\n  // ### The term type of this term\n  get termType() {\n    return 'Quad';\n  }\n\n  get subject() {\n    return this._subject;\n  }\n\n  get predicate() {\n    return this._predicate;\n  }\n\n  get object() {\n    return this._object;\n  }\n\n  get graph() {\n    return this._graph;\n  }\n\n  // ### Returns a plain object representation of this quad\n  toJSON() {\n    return {\n      termType:  this.termType,\n      subject:   this._subject.toJSON(),\n      predicate: this._predicate.toJSON(),\n      object:    this._object.toJSON(),\n      graph:     this._graph.toJSON(),\n    };\n  }\n\n  // ### Returns whether this object represents the same quad as the other\n  equals(other) {\n    return !!other && this._subject.equals(other.subject)     &&\n                      this._predicate.equals(other.predicate) &&\n                      this._object.equals(other.object)       &&\n                      this._graph.equals(other.graph);\n  }\n}\nexport { Quad as Triple };\n\n// ### Escapes the quotes within the given literal\nexport function escapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"/g, '\"\"')}`);\n}\n\n// ### Unescapes the quotes within the given literal\nexport function unescapeQuotes(id) {\n  return id.replace(escapedLiteral, (_, quoted) => `\"${quoted.replace(/\"\"/g, '\"')}`);\n}\n\n// ### Creates an IRI\nfunction namedNode(iri) {\n  return new NamedNode(iri);\n}\n\n// ### Creates a blank node\nfunction blankNode(name) {\n  return new BlankNode(name || `n3-${_blankNodeCounter++}`);\n}\n\n// ### Creates a literal\nfunction literal(value, languageOrDataType) {\n  // Create a language-tagged string\n  if (typeof languageOrDataType === 'string')\n    return new Literal(`\"${value}\"@${languageOrDataType.toLowerCase()}`);\n\n  // Automatically determine datatype for booleans and numbers\n  let datatype = languageOrDataType ? languageOrDataType.value : '';\n  if (datatype === '') {\n    // Convert a boolean\n    if (typeof value === 'boolean')\n      datatype = xsd.boolean;\n    // Convert an integer or double\n    else if (typeof value === 'number') {\n      if (Number.isFinite(value))\n        datatype = Number.isInteger(value) ? xsd.integer : xsd.double;\n      else {\n        datatype = xsd.double;\n        if (!Number.isNaN(value))\n          value = value > 0 ? 'INF' : '-INF';\n      }\n    }\n  }\n\n  // Create a datatyped literal\n  return (datatype === '' || datatype === xsd.string) ?\n    new Literal(`\"${value}\"`) :\n    new Literal(`\"${value}\"^^${datatype}`);\n}\n\n// ### Creates a variable\nfunction variable(name) {\n  return new Variable(name);\n}\n\n// ### Returns the default graph\nfunction defaultGraph() {\n  return DEFAULTGRAPH;\n}\n\n// ### Creates a quad\nfunction quad(subject, predicate, object, graph) {\n  return new Quad(subject, predicate, object, graph);\n}\n","// **N3Parser** parses N3 documents.\nimport N3Lexer from './N3Lexer';\nimport N3DataFactory from './N3DataFactory';\nimport namespaces from './IRIs';\n\nlet blankNodePrefix = 0;\n\n// ## Constructor\nexport default class N3Parser {\n  constructor(options) {\n    this._contextStack = [];\n    this._graph = null;\n\n    // Set the document IRI\n    options = options || {};\n    this._setBase(options.baseIRI);\n    options.factory && initDataFactory(this, options.factory);\n\n    // Set supported features depending on the format\n    const format = (typeof options.format === 'string') ?\n                 options.format.match(/\\w*$/)[0].toLowerCase() : '',\n        isTurtle = /turtle/.test(format), isTriG = /trig/.test(format),\n        isNTriples = /triple/.test(format), isNQuads = /quad/.test(format),\n        isN3 = this._n3Mode = /n3/.test(format),\n        isLineMode = isNTriples || isNQuads;\n    if (!(this._supportsNamedGraphs = !(isTurtle || isN3)))\n      this._readPredicateOrNamedGraph = this._readPredicate;\n    // Support triples in other graphs\n    this._supportsQuads = !(isTurtle || isTriG || isNTriples || isN3);\n    // Support nesting of triples\n    this._supportsRDFStar = format === '' || /star|\\*$/.test(format);\n    // Disable relative IRIs in N-Triples or N-Quads mode\n    if (isLineMode)\n      this._resolveRelativeIRI = iri => { return null; };\n    this._blankNodePrefix = typeof options.blankNodePrefix !== 'string' ? '' :\n                              options.blankNodePrefix.replace(/^(?!_:)/, '_:');\n    this._lexer = options.lexer || new N3Lexer({ lineMode: isLineMode, n3: isN3 });\n    // Disable explicit quantifiers by default\n    this._explicitQuantifiers = !!options.explicitQuantifiers;\n  }\n\n  // ## Static class methods\n\n  // ### `_resetBlankNodePrefix` restarts blank node prefix identification\n  static _resetBlankNodePrefix() {\n    blankNodePrefix = 0;\n  }\n\n  // ## Private methods\n\n  // ### `_setBase` sets the base IRI to resolve relative IRIs\n  _setBase(baseIRI) {\n    if (!baseIRI) {\n      this._base = '';\n      this._basePath = '';\n    }\n    else {\n      // Remove fragment if present\n      const fragmentPos = baseIRI.indexOf('#');\n      if (fragmentPos >= 0)\n        baseIRI = baseIRI.substr(0, fragmentPos);\n      // Set base IRI and its components\n      this._base = baseIRI;\n      this._basePath   = baseIRI.indexOf('/') < 0 ? baseIRI :\n                         baseIRI.replace(/[^\\/?]*(?:\\?.*)?$/, '');\n      baseIRI = baseIRI.match(/^(?:([a-z][a-z0-9+.-]*:))?(?:\\/\\/[^\\/]*)?/i);\n      this._baseRoot   = baseIRI[0];\n      this._baseScheme = baseIRI[1];\n    }\n  }\n\n  // ### `_saveContext` stores the current parsing context\n  // when entering a new scope (list, blank node, formula)\n  _saveContext(type, graph, subject, predicate, object) {\n    const n3Mode = this._n3Mode;\n    this._contextStack.push({\n      type,\n      subject, predicate, object, graph,\n      inverse: n3Mode ? this._inversePredicate : false,\n      blankPrefix: n3Mode ? this._prefixes._ : '',\n      quantified: n3Mode ? this._quantified : null,\n    });\n    // The settings below only apply to N3 streams\n    if (n3Mode) {\n      // Every new scope resets the predicate direction\n      this._inversePredicate = false;\n      // In N3, blank nodes are scoped to a formula\n      // (using a dot as separator, as a blank node label cannot start with it)\n      this._prefixes._ = (this._graph ? `${this._graph.id.substr(2)}.` : '.');\n      // Quantifiers are scoped to a formula\n      this._quantified = Object.create(this._quantified);\n    }\n  }\n\n  // ### `_restoreContext` restores the parent context\n  // when leaving a scope (list, blank node, formula)\n  _restoreContext(type, token) {\n    // Obtain the previous context\n    const context = this._contextStack.pop();\n    if (!context || context.type !== type)\n      return this._error(`Unexpected ${token.type}`, token);\n\n    // Restore the quad of the previous context\n    this._subject   = context.subject;\n    this._predicate = context.predicate;\n    this._object    = context.object;\n    this._graph     = context.graph;\n\n    // Restore N3 context settings\n    if (this._n3Mode) {\n      this._inversePredicate = context.inverse;\n      this._prefixes._ = context.blankPrefix;\n      this._quantified = context.quantified;\n    }\n  }\n\n  // ### `_readInTopContext` reads a token when in the top context\n  _readInTopContext(token) {\n    switch (token.type) {\n    // If an EOF token arrives in the top context, signal that we're done\n    case 'eof':\n      if (this._graph !== null)\n        return this._error('Unclosed graph', token);\n      delete this._prefixes._;\n      return this._callback(null, null, this._prefixes);\n    // It could be a prefix declaration\n    case 'PREFIX':\n      this._sparqlStyle = true;\n    case '@prefix':\n      return this._readPrefix;\n    // It could be a base declaration\n    case 'BASE':\n      this._sparqlStyle = true;\n    case '@base':\n      return this._readBaseIRI;\n    // It could be a graph\n    case '{':\n      if (this._supportsNamedGraphs) {\n        this._graph = '';\n        this._subject = null;\n        return this._readSubject;\n      }\n    case 'GRAPH':\n      if (this._supportsNamedGraphs)\n        return this._readNamedGraphLabel;\n    // Otherwise, the next token must be a subject\n    default:\n      return this._readSubject(token);\n    }\n  }\n\n  // ### `_readEntity` reads an IRI, prefixed name, blank node, or variable\n  _readEntity(token, quantifier) {\n    let value;\n    switch (token.type) {\n    // Read a relative or absolute IRI\n    case 'IRI':\n    case 'typeIRI':\n      const iri = this._resolveIRI(token.value);\n      if (iri === null)\n        return this._error('Invalid IRI', token);\n      value = this._namedNode(iri);\n      break;\n    // Read a prefixed name\n    case 'type':\n    case 'prefixed':\n      const prefix = this._prefixes[token.prefix];\n      if (prefix === undefined)\n        return this._error(`Undefined prefix \"${token.prefix}:\"`, token);\n      value = this._namedNode(prefix + token.value);\n      break;\n    // Read a blank node\n    case 'blank':\n      value = this._blankNode(this._prefixes[token.prefix] + token.value);\n      break;\n    // Read a variable\n    case 'var':\n      value = this._variable(token.value.substr(1));\n      break;\n    // Everything else is not an entity\n    default:\n      return this._error(`Expected entity but got ${token.type}`, token);\n    }\n    // In N3 mode, replace the entity if it is quantified\n    if (!quantifier && this._n3Mode && (value.id in this._quantified))\n      value = this._quantified[value.id];\n    return value;\n  }\n\n  // ### `_readSubject` reads a quad's subject\n  _readSubject(token) {\n    this._predicate = null;\n    switch (token.type) {\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph,\n                        this._subject = this._blankNode(), null, null);\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this.RDF_NIL, null, null);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph,\n                        this._graph = this._blankNode(), null, null);\n      return this._readSubject;\n    case '}':\n       // No subject; the graph in which we are reading is closed instead\n      return this._readPunctuation(token);\n    case '@forSome':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forSome\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORSOME;\n      this._quantifier = this._blankNode;\n      return this._readQuantifierList;\n    case '@forAll':\n      if (!this._n3Mode)\n        return this._error('Unexpected \"@forAll\"', token);\n      this._subject = null;\n      this._predicate = this.N3_FORALL;\n      this._quantifier = this._variable;\n      return this._readQuantifierList;\n    case 'literal':\n      if (!this._n3Mode)\n        return this._error('Unexpected literal', token);\n\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._completeSubjectLiteral;\n      }\n      else\n        this._subject = this._literal(token.value, this._namedNode(token.prefix));\n\n      break;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, null, null, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the subject entity\n      if ((this._subject = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the subject might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._readPredicateOrNamedGraph);\n    }\n\n    // The next token must be a predicate,\n    // or, if the subject was actually a graph IRI, a named graph\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // ### `_readPredicate` reads a quad's predicate\n  _readPredicate(token) {\n    const type = token.type;\n    switch (type) {\n    case 'inverse':\n      this._inversePredicate = true;\n    case 'abbreviation':\n      this._predicate = this.ABBREVIATIONS[token.value];\n      break;\n    case '.':\n    case ']':\n    case '}':\n      // Expected predicate didn't come, must have been trailing semicolon\n      if (this._predicate === null)\n        return this._error(`Unexpected ${type}`, token);\n      this._subject = null;\n      return type === ']' ? this._readBlankNodeTail(token) : this._readPunctuation(token);\n    case ';':\n      // Additional semicolons can be safely ignored\n      return this._predicate !== null ? this._readPredicate :\n             this._error('Expected predicate but got ;', token);\n    case '[':\n      if (this._n3Mode) {\n        // Start a new quad with a new blank node as subject\n        this._saveContext('blank', this._graph, this._subject,\n                          this._subject = this._blankNode(), null);\n        return this._readBlankNodeHead;\n      }\n    case 'blank':\n      if (!this._n3Mode)\n        return this._error('Disallowed blank node as predicate', token);\n    default:\n      if ((this._predicate = this._readEntity(token)) === undefined)\n        return;\n    }\n    // The next token must be an object\n    return this._readObject;\n  }\n\n  // ### `_readObject` reads a quad's object\n  _readObject(token) {\n    switch (token.type) {\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        return this._readDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else\n        this._object = this._literal(token.value, this._namedNode(token.prefix));\n      break;\n    case '[':\n      // Start a new quad with a new blank node as subject\n      this._saveContext('blank', this._graph, this._subject, this._predicate,\n                        this._subject = this._blankNode());\n      return this._readBlankNodeHead;\n    case '(':\n      // Start a new list\n      this._saveContext('list', this._graph, this._subject, this._predicate, this.RDF_NIL);\n      this._subject = null;\n      return this._readListItem;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    case '<<':\n      if (!this._supportsRDFStar)\n        return this._error('Unexpected RDF* syntax', token);\n      this._saveContext('<<', this._graph, this._subject, this._predicate, null);\n      this._graph = null;\n      return this._readSubject;\n    default:\n      // Read the object entity\n      if ((this._object = this._readEntity(token)) === undefined)\n        return;\n      // In N3 mode, the object might be a path\n      if (this._n3Mode)\n        return this._getPathReader(this._getContextEndReader());\n    }\n    return this._getContextEndReader();\n  }\n\n  // ### `_readPredicateOrNamedGraph` reads a quad's predicate, or a named graph\n  _readPredicateOrNamedGraph(token) {\n    return token.type === '{' ? this._readGraph(token) : this._readPredicate(token);\n  }\n\n  // ### `_readGraph` reads a graph\n  _readGraph(token) {\n    if (token.type !== '{')\n      return this._error(`Expected graph but got ${token.type}`, token);\n    // The \"subject\" we read is actually the GRAPH's label\n    this._graph = this._subject, this._subject = null;\n    return this._readSubject;\n  }\n\n  // ### `_readBlankNodeHead` reads the head of a blank node\n  _readBlankNodeHead(token) {\n    if (token.type === ']') {\n      this._subject = null;\n      return this._readBlankNodeTail(token);\n    }\n    else {\n      this._predicate = null;\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readBlankNodeTail` reads the end of a blank node\n  _readBlankNodeTail(token) {\n    if (token.type !== ']')\n      return this._readBlankNodePunctuation(token);\n\n    // Store blank node quad\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this blank node\n    const empty = this._predicate === null;\n    this._restoreContext('blank', token);\n    // If the blank node was the object, restore previous context and read punctuation\n    if (this._object !== null)\n      return this._getContextEndReader();\n    // If the blank node was the predicate, continue reading the object\n    else if (this._predicate !== null)\n      return this._readObject;\n    // If the blank node was the subject, continue reading the predicate\n    else\n      // If the blank node was empty, it could be a named graph label\n      return empty ? this._readPredicateOrNamedGraph : this._readPredicateAfterBlank;\n  }\n\n  // ### `_readPredicateAfterBlank` reads a predicate after an anonymous blank node\n  _readPredicateAfterBlank(token) {\n    switch (token.type) {\n    case '.':\n    case '}':\n      // No predicate is coming if the triple is terminated here\n      this._subject = null;\n      return this._readPunctuation(token);\n    default:\n      return this._readPredicate(token);\n    }\n  }\n\n  // ### `_readListItem` reads items from a list\n  _readListItem(token) {\n    let item = null,                      // The item of the list\n        list = null,                      // The list itself\n        next = this._readListItem;        // The next function to execute\n    const previousList = this._subject,   // The previous list that contains this list\n        stack = this._contextStack,       // The stack of parent contexts\n        parent = stack[stack.length - 1]; // The parent containing the current list\n\n    switch (token.type) {\n    case '[':\n      // Stack the current list quad and start a new quad with a blank node as subject\n      this._saveContext('blank', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST,\n                        this._subject = item = this._blankNode());\n      next = this._readBlankNodeHead;\n      break;\n    case '(':\n      // Stack the current list quad and start a new list\n      this._saveContext('list', this._graph,\n                        list = this._blankNode(), this.RDF_FIRST, this.RDF_NIL);\n      this._subject = null;\n      break;\n    case ')':\n      // Closing the list; restore the parent context\n      this._restoreContext('list', token);\n      // If this list is contained within a parent list, return the membership quad here.\n      // This will be `<parent list element> rdf:first <this list>.`.\n      if (stack.length !== 0 && stack[stack.length - 1].type === 'list')\n        this._emit(this._subject, this._predicate, this._object, this._graph);\n      // Was this list the parent's subject?\n      if (this._predicate === null) {\n        // The next token is the predicate\n        next = this._readPredicate;\n        // No list tail if this was an empty list\n        if (this._subject === this.RDF_NIL)\n          return next;\n      }\n      // The list was in the parent context's object\n      else {\n        next = this._getContextEndReader();\n        // No list tail if this was an empty list\n        if (this._object === this.RDF_NIL)\n          return next;\n      }\n      // Close the list by making the head nil\n      list = this.RDF_NIL;\n      break;\n    case 'literal':\n      // Regular literal, can still get a datatype or language\n      if (token.prefix.length === 0) {\n        this._literalValue = token.value;\n        next = this._readListItemDataTypeOrLang;\n      }\n      // Pre-datatyped string literal (prefix stores the datatype)\n      else {\n        item = this._literal(token.value, this._namedNode(token.prefix));\n        next = this._getContextEndReader();\n      }\n      break;\n    case '{':\n      // Start a new formula\n      if (!this._n3Mode)\n        return this._error('Unexpected graph', token);\n      this._saveContext('formula', this._graph, this._subject, this._predicate,\n                        this._graph = this._blankNode());\n      return this._readSubject;\n    default:\n      if ((item = this._readEntity(token)) === undefined)\n        return;\n    }\n\n     // Create a new blank node if no item head was assigned yet\n    if (list === null)\n      this._subject = list = this._blankNode();\n\n    // Is this the first element of the list?\n    if (previousList === null) {\n      // This list is either the subject or the object of its parent\n      if (parent.predicate === null)\n        parent.subject = list;\n      else\n        parent.object = list;\n    }\n    else {\n      // Continue the previous list with the current list\n      this._emit(previousList, this.RDF_REST, list, this._graph);\n    }\n    // If an item was read, add it to the list\n    if (item !== null) {\n      // In N3 mode, the item might be a path\n      if (this._n3Mode && (token.type === 'IRI' || token.type === 'prefixed')) {\n        // Create a new context to add the item's path\n        this._saveContext('item', this._graph, list, this.RDF_FIRST, item);\n        this._subject = item, this._predicate = null;\n        // _readPath will restore the context and output the item\n        return this._getPathReader(this._readListItem);\n      }\n      // Output the item\n      this._emit(list, this.RDF_FIRST, item, this._graph);\n    }\n    return next;\n  }\n\n  // ### `_readDataTypeOrLang` reads an _optional_ datatype or language\n  _readDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, false);\n  }\n\n\n  // ### `_readListItemDataTypeOrLang` reads an _optional_ datatype or language in a list\n  _readListItemDataTypeOrLang(token) {\n    return this._completeObjectLiteral(token, true);\n  }\n\n  // ### `_completeLiteral` completes a literal with an optional datatype or language\n  _completeLiteral(token) {\n    // Create a simple string literal by default\n    let literal = this._literal(this._literalValue);\n\n    switch (token.type) {\n    // Create a datatyped literal\n    case 'type':\n    case 'typeIRI':\n      const datatype = this._readEntity(token);\n      if (datatype === undefined) return; // No datatype means an error occurred\n      literal = this._literal(this._literalValue, datatype);\n      token = null;\n      break;\n    // Create a language-tagged string\n    case 'langcode':\n      literal = this._literal(this._literalValue, token.value);\n      token = null;\n      break;\n    }\n\n    return { token, literal };\n  }\n\n  // Completes a literal in subject position\n  _completeSubjectLiteral(token) {\n    this._subject = this._completeLiteral(token).literal;\n    return this._readPredicateOrNamedGraph;\n  }\n\n  // Completes a literal in object position\n  _completeObjectLiteral(token, listItem) {\n    const completed = this._completeLiteral(token);\n    if (!completed)\n      return;\n    this._object = completed.literal;\n\n    // If this literal was part of a list, write the item\n    // (we could also check the context stack, but passing in a flag is faster)\n    if (listItem)\n      this._emit(this._subject, this.RDF_FIRST, this._object, this._graph);\n    // If the token was consumed, continue with the rest of the input\n    if (completed.token === null)\n      return this._getContextEndReader();\n    // Otherwise, consume the token now\n    else {\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(completed.token);\n    }\n  }\n\n  // ### `_readFormulaTail` reads the end of a formula\n  _readFormulaTail(token) {\n    if (token.type !== '}')\n      return this._readPunctuation(token);\n\n    // Store the last quad of the formula\n    if (this._subject !== null)\n      this._emit(this._subject, this._predicate, this._object, this._graph);\n\n    // Restore the parent context containing this formula\n    this._restoreContext('formula', token);\n    // If the formula was the subject, continue reading the predicate.\n    // If the formula was the object, read punctuation.\n    return this._object === null ? this._readPredicate : this._getContextEndReader();\n  }\n\n  // ### `_readPunctuation` reads punctuation between quads or quad parts\n  _readPunctuation(token) {\n    let next, graph = this._graph;\n    const subject = this._subject, inversePredicate = this._inversePredicate;\n    switch (token.type) {\n    // A closing brace ends a graph\n    case '}':\n      if (this._graph === null)\n        return this._error('Unexpected graph closing', token);\n      if (this._n3Mode)\n        return this._readFormulaTail(token);\n      this._graph = null;\n    // A dot just ends the statement, without sharing anything with the next\n    case '.':\n      this._subject = null;\n      next = this._contextStack.length ? this._readSubject : this._readInTopContext;\n      if (inversePredicate) this._inversePredicate = false;\n      break;\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (graph = this._readEntity(token)) !== undefined) {\n        next = this._readQuadPunctuation;\n        break;\n      }\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    if (subject !== null) {\n      const predicate = this._predicate, object = this._object;\n      if (!inversePredicate)\n        this._emit(subject, predicate, object,  graph);\n      else\n        this._emit(object,  predicate, subject, graph);\n    }\n    return next;\n  }\n\n    // ### `_readBlankNodePunctuation` reads punctuation in a blank node\n  _readBlankNodePunctuation(token) {\n    let next;\n    switch (token.type) {\n    // Semicolon means the subject is shared; predicate and object are different\n    case ';':\n      next = this._readPredicate;\n      break;\n    // Comma means both the subject and predicate are shared; the object is different\n    case ',':\n      next = this._readObject;\n      break;\n    default:\n      return this._error(`Expected punctuation to follow \"${this._object.id}\"`, token);\n    }\n    // A quad has been completed now, so return it\n    this._emit(this._subject, this._predicate, this._object, this._graph);\n    return next;\n  }\n\n  // ### `_readQuadPunctuation` reads punctuation after a quad\n  _readQuadPunctuation(token) {\n    if (token.type !== '.')\n      return this._error('Expected dot to follow quad', token);\n    return this._readInTopContext;\n  }\n\n  // ### `_readPrefix` reads the prefix of a prefix declaration\n  _readPrefix(token) {\n    if (token.type !== 'prefix')\n      return this._error('Expected prefix to follow @prefix', token);\n    this._prefix = token.value;\n    return this._readPrefixIRI;\n  }\n\n  // ### `_readPrefixIRI` reads the IRI of a prefix declaration\n  _readPrefixIRI(token) {\n    if (token.type !== 'IRI')\n      return this._error(`Expected IRI to follow prefix \"${this._prefix}:\"`, token);\n    const prefixNode = this._readEntity(token);\n    this._prefixes[this._prefix] = prefixNode.value;\n    this._prefixCallback(this._prefix, prefixNode);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readBaseIRI` reads the IRI of a base declaration\n  _readBaseIRI(token) {\n    const iri = token.type === 'IRI' && this._resolveIRI(token.value);\n    if (!iri)\n      return this._error('Expected valid IRI to follow base declaration', token);\n    this._setBase(iri);\n    return this._readDeclarationPunctuation;\n  }\n\n  // ### `_readNamedGraphLabel` reads the label of a named graph\n  _readNamedGraphLabel(token) {\n    switch (token.type) {\n    case 'IRI':\n    case 'blank':\n    case 'prefixed':\n      return this._readSubject(token), this._readGraph;\n    case '[':\n      return this._readNamedGraphBlankLabel;\n    default:\n      return this._error('Invalid graph label', token);\n    }\n  }\n\n  // ### `_readNamedGraphLabel` reads a blank node label of a named graph\n  _readNamedGraphBlankLabel(token) {\n    if (token.type !== ']')\n      return this._error('Invalid graph label', token);\n    this._subject = this._blankNode();\n    return this._readGraph;\n  }\n\n  // ### `_readDeclarationPunctuation` reads the punctuation of a declaration\n  _readDeclarationPunctuation(token) {\n    // SPARQL-style declarations don't have punctuation\n    if (this._sparqlStyle) {\n      this._sparqlStyle = false;\n      return this._readInTopContext(token);\n    }\n\n    if (token.type !== '.')\n      return this._error('Expected declaration to end with a dot', token);\n    return this._readInTopContext;\n  }\n\n  // Reads a list of quantified symbols from a @forSome or @forAll statement\n  _readQuantifierList(token) {\n    let entity;\n    switch (token.type) {\n    case 'IRI':\n    case 'prefixed':\n      if ((entity = this._readEntity(token, true)) !== undefined)\n        break;\n    default:\n      return this._error(`Unexpected ${token.type}`, token);\n    }\n    // Without explicit quantifiers, map entities to a quantified entity\n    if (!this._explicitQuantifiers)\n      this._quantified[entity.id] = this._quantifier(this._blankNode().value);\n    // With explicit quantifiers, output the reified quantifier\n    else {\n      // If this is the first item, start a new quantifier list\n      if (this._subject === null)\n        this._emit(this._graph || this.DEFAULTGRAPH, this._predicate,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Otherwise, continue the previous list\n      else\n        this._emit(this._subject, this.RDF_REST,\n                   this._subject = this._blankNode(), this.QUANTIFIERS_GRAPH);\n      // Output the list item\n      this._emit(this._subject, this.RDF_FIRST, entity, this.QUANTIFIERS_GRAPH);\n    }\n    return this._readQuantifierPunctuation;\n  }\n\n  // Reads punctuation from a @forSome or @forAll statement\n  _readQuantifierPunctuation(token) {\n    // Read more quantifiers\n    if (token.type === ',')\n      return this._readQuantifierList;\n    // End of the quantifier list\n    else {\n      // With explicit quantifiers, close the quantifier list\n      if (this._explicitQuantifiers) {\n        this._emit(this._subject, this.RDF_REST, this.RDF_NIL, this.QUANTIFIERS_GRAPH);\n        this._subject = null;\n      }\n      // Read a dot\n      this._readCallback = this._getContextEndReader();\n      return this._readCallback(token);\n    }\n  }\n\n  // ### `_getPathReader` reads a potential path and then resumes with the given function\n  _getPathReader(afterPath) {\n    this._afterPath = afterPath;\n    return this._readPath;\n  }\n\n  // ### `_readPath` reads a potential path\n  _readPath(token) {\n    switch (token.type) {\n    // Forward path\n    case '!': return this._readForwardPath;\n    // Backward path\n    case '^': return this._readBackwardPath;\n    // Not a path; resume reading where we left off\n    default:\n      const stack = this._contextStack, parent = stack.length && stack[stack.length - 1];\n      // If we were reading a list item, we still need to output it\n      if (parent && parent.type === 'item') {\n        // The list item is the remaining subejct after reading the path\n        const item = this._subject;\n        // Switch back to the context of the list\n        this._restoreContext('item', token);\n        // Output the list item\n        this._emit(this._subject, this.RDF_FIRST, item, this._graph);\n      }\n      return this._afterPath(token);\n    }\n  }\n\n  // ### `_readForwardPath` reads a '!' path\n  _readForwardPath(token) {\n    let subject, predicate;\n    const object = this._blankNode();\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's object\n    if (this._predicate === null)\n      subject = this._subject, this._subject = object;\n    // If we were reading an object, replace the subject by the path's object\n    else\n      subject = this._object,  this._object  = object;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readBackwardPath` reads a '^' path\n  _readBackwardPath(token) {\n    const subject = this._blankNode();\n    let predicate, object;\n    // The next token is the predicate\n    if ((predicate = this._readEntity(token)) === undefined)\n      return;\n    // If we were reading a subject, replace the subject by the path's subject\n    if (this._predicate === null)\n      object = this._subject, this._subject = subject;\n    // If we were reading an object, replace the subject by the path's subject\n    else\n      object = this._object,  this._object  = subject;\n    // Emit the path's current quad and read its next section\n    this._emit(subject, predicate, object, this._graph);\n    return this._readPath;\n  }\n\n  // ### `_readRDFStarTailOrGraph` reads the graph of a nested RDF* quad or the end of a nested RDF* triple\n  _readRDFStarTailOrGraph(token) {\n    if (token.type !== '>>') {\n      // An entity means this is a quad (only allowed if not already inside a graph)\n      if (this._supportsQuads && this._graph === null && (this._graph = this._readEntity(token)) !== undefined)\n        return this._readRDFStarTail;\n      return this._error(`Expected >> to follow \"${this._object.id}\"`, token);\n    }\n    return this._readRDFStarTail(token);\n  }\n\n  // ### `_readRDFStarTail` reads the end of a nested RDF* triple\n  _readRDFStarTail(token) {\n    if (token.type !== '>>')\n      return this._error(`Expected >> but got ${token.type}`, token);\n    // Read the quad and restore the previous context\n    const quad = this._quad(this._subject, this._predicate, this._object,\n      this._graph || this.DEFAULTGRAPH);\n    this._restoreContext('<<', token);\n    // If the triple was the subject, continue by reading the predicate.\n    if (this._subject === null) {\n      this._subject = quad;\n      return this._readPredicate;\n    }\n    // If the triple was the object, read context end.\n    else {\n      this._object = quad;\n      return this._getContextEndReader();\n    }\n  }\n\n  // ### `_getContextEndReader` gets the next reader function at the end of a context\n  _getContextEndReader() {\n    const contextStack = this._contextStack;\n    if (!contextStack.length)\n      return this._readPunctuation;\n\n    switch (contextStack[contextStack.length - 1].type) {\n    case 'blank':\n      return this._readBlankNodeTail;\n    case 'list':\n      return this._readListItem;\n    case 'formula':\n      return this._readFormulaTail;\n    case '<<':\n      return this._readRDFStarTailOrGraph;\n    }\n  }\n\n  // ### `_emit` sends a quad through the callback\n  _emit(subject, predicate, object, graph) {\n    this._callback(null, this._quad(subject, predicate, object, graph || this.DEFAULTGRAPH));\n  }\n\n  // ### `_error` emits an error message through the callback\n  _error(message, token) {\n    const err = new Error(`${message} on line ${token.line}.`);\n    err.context = {\n      token: token,\n      line: token.line,\n      previousToken: this._lexer.previousToken,\n    };\n    this._callback(err);\n    this._callback = noop;\n  }\n\n  // ### `_resolveIRI` resolves an IRI against the base path\n  _resolveIRI(iri) {\n    return /^[a-z][a-z0-9+.-]*:/i.test(iri) ? iri : this._resolveRelativeIRI(iri);\n  }\n\n  // ### `_resolveRelativeIRI` resolves an IRI against the base path,\n  // assuming that a base path has been set and that the IRI is indeed relative\n  _resolveRelativeIRI(iri) {\n    // An empty relative IRI indicates the base IRI\n    if (!iri.length)\n      return this._base;\n    // Decide resolving strategy based in the first character\n    switch (iri[0]) {\n    // Resolve relative fragment IRIs against the base IRI\n    case '#': return this._base + iri;\n    // Resolve relative query string IRIs by replacing the query string\n    case '?': return this._base.replace(/(?:\\?.*)?$/, iri);\n    // Resolve root-relative IRIs at the root of the base IRI\n    case '/':\n      // Resolve scheme-relative IRIs to the scheme\n      return (iri[1] === '/' ? this._baseScheme : this._baseRoot) + this._removeDotSegments(iri);\n    // Resolve all other IRIs at the base IRI's path\n    default:\n      // Relative IRIs cannot contain a colon in the first path segment\n      return (/^[^/:]*:/.test(iri)) ? null : this._removeDotSegments(this._basePath + iri);\n    }\n  }\n\n  // ### `_removeDotSegments` resolves './' and '../' path segments in an IRI as per RFC3986\n  _removeDotSegments(iri) {\n    // Don't modify the IRI if it does not contain any dot segments\n    if (!/(^|\\/)\\.\\.?($|[/#?])/.test(iri))\n      return iri;\n\n    // Start with an imaginary slash before the IRI in order to resolve trailing './' and '../'\n    const length = iri.length;\n    let result = '', i = -1, pathStart = -1, segmentStart = 0, next = '/';\n\n    while (i < length) {\n      switch (next) {\n      // The path starts with the first slash after the authority\n      case ':':\n        if (pathStart < 0) {\n          // Skip two slashes before the authority\n          if (iri[++i] === '/' && iri[++i] === '/')\n            // Skip to slash after the authority\n            while ((pathStart = i + 1) < length && iri[pathStart] !== '/')\n              i = pathStart;\n        }\n        break;\n      // Don't modify a query string or fragment\n      case '?':\n      case '#':\n        i = length;\n        break;\n      // Handle '/.' or '/..' path segments\n      case '/':\n        if (iri[i + 1] === '.') {\n          next = iri[++i + 1];\n          switch (next) {\n          // Remove a '/.' segment\n          case '/':\n            result += iri.substring(segmentStart, i - 1);\n            segmentStart = i + 1;\n            break;\n          // Remove a trailing '/.' segment\n          case undefined:\n          case '?':\n          case '#':\n            return result + iri.substring(segmentStart, i) + iri.substr(i + 1);\n          // Remove a '/..' segment\n          case '.':\n            next = iri[++i + 1];\n            if (next === undefined || next === '/' || next === '?' || next === '#') {\n              result += iri.substring(segmentStart, i - 2);\n              // Try to remove the parent path from result\n              if ((segmentStart = result.lastIndexOf('/')) >= pathStart)\n                result = result.substr(0, segmentStart);\n              // Remove a trailing '/..' segment\n              if (next !== '/')\n                return `${result}/${iri.substr(i + 1)}`;\n              segmentStart = i + 1;\n            }\n          }\n        }\n      }\n      next = iri[++i];\n    }\n    return result + iri.substring(segmentStart);\n  }\n\n  // ## Public methods\n\n  // ### `parse` parses the N3 input and emits each parsed quad through the callback\n  parse(input, quadCallback, prefixCallback) {\n    // The read callback is the next function to be executed when a token arrives.\n    // We start reading in the top context.\n    this._readCallback = this._readInTopContext;\n    this._sparqlStyle = false;\n    this._prefixes = Object.create(null);\n    this._prefixes._ = this._blankNodePrefix ? this._blankNodePrefix.substr(2)\n                                             : `b${blankNodePrefix++}_`;\n    this._prefixCallback = prefixCallback || noop;\n    this._inversePredicate = false;\n    this._quantified = Object.create(null);\n\n    // Parse synchronously if no quad callback is given\n    if (!quadCallback) {\n      const quads = [];\n      let error;\n      this._callback = (e, t) => { e ? (error = e) : t && quads.push(t); };\n      this._lexer.tokenize(input).every(token => {\n        return this._readCallback = this._readCallback(token);\n      });\n      if (error) throw error;\n      return quads;\n    }\n\n    // Parse asynchronously otherwise, executing the read callback when a token arrives\n    this._callback = quadCallback;\n    this._lexer.tokenize(input, (error, token) => {\n      if (error !== null)\n        this._callback(error), this._callback = noop;\n      else if (this._readCallback)\n        this._readCallback = this._readCallback(token);\n    });\n  }\n}\n\n// The empty function\nfunction noop() {}\n\n// Initializes the parser with the given data factory\nfunction initDataFactory(parser, factory) {\n  // Set factory methods\n  const namedNode = factory.namedNode;\n  parser._namedNode   = namedNode;\n  parser._blankNode   = factory.blankNode;\n  parser._literal     = factory.literal;\n  parser._variable    = factory.variable;\n  parser._quad        = factory.quad;\n  parser.DEFAULTGRAPH = factory.defaultGraph();\n\n  // Set common named nodes\n  parser.RDF_FIRST  = namedNode(namespaces.rdf.first);\n  parser.RDF_REST   = namedNode(namespaces.rdf.rest);\n  parser.RDF_NIL    = namedNode(namespaces.rdf.nil);\n  parser.N3_FORALL  = namedNode(namespaces.r.forAll);\n  parser.N3_FORSOME = namedNode(namespaces.r.forSome);\n  parser.ABBREVIATIONS = {\n    'a': namedNode(namespaces.rdf.type),\n    '=': namedNode(namespaces.owl.sameAs),\n    '>': namedNode(namespaces.log.implies),\n  };\n  parser.QUANTIFIERS_GRAPH = namedNode('urn:n3:quantifiers');\n}\ninitDataFactory(N3Parser.prototype, N3DataFactory);\n","// **N3Writer** writes N3 documents.\nimport namespaces from './IRIs';\nimport { default as N3DataFactory, Term } from './N3DataFactory';\nimport { isDefaultGraph } from './N3Util';\n\nconst DEFAULTGRAPH = N3DataFactory.defaultGraph();\n\nconst { rdf, xsd } = namespaces;\n\n// Characters in literals that require escaping\nconst escape    = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n    escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n    escapedCharacters = {\n      '\\\\': '\\\\\\\\', '\"': '\\\\\"', '\\t': '\\\\t',\n      '\\n': '\\\\n', '\\r': '\\\\r', '\\b': '\\\\b', '\\f': '\\\\f',\n    };\n\n// ## Placeholder class to represent already pretty-printed terms\nclass SerializedTerm extends Term {\n  // Pretty-printed nodes are not equal to any other node\n  // (e.g., [] does not equal [])\n  equals() {\n    return false;\n  }\n}\n\n// ## Constructor\nexport default class N3Writer {\n  constructor(outputStream, options) {\n    // ### `_prefixRegex` matches a prefixed name or IRI that begins with one of the added prefixes\n    this._prefixRegex = /$0^/;\n\n    // Shift arguments if the first argument is not a stream\n    if (outputStream && typeof outputStream.write !== 'function')\n      options = outputStream, outputStream = null;\n    options = options || {};\n    this._lists = options.lists;\n\n    // If no output stream given, send the output as string through the end callback\n    if (!outputStream) {\n      let output = '';\n      this._outputStream = {\n        write(chunk, encoding, done) { output += chunk; done && done(); },\n        end: done => { done && done(null, output); },\n      };\n      this._endStream = true;\n    }\n    else {\n      this._outputStream = outputStream;\n      this._endStream = options.end === undefined ? true : !!options.end;\n    }\n\n    // Initialize writer, depending on the format\n    this._subject = null;\n    if (!(/triple|quad/i).test(options.format)) {\n      this._lineMode = false;\n      this._graph = DEFAULTGRAPH;\n      this._prefixIRIs = Object.create(null);\n      options.prefixes && this.addPrefixes(options.prefixes);\n      if (options.baseIRI) {\n        this._baseMatcher = new RegExp(`^${escapeRegex(options.baseIRI)\n            }${options.baseIRI.endsWith('/') ? '' : '[#?]'}`);\n        this._baseLength = options.baseIRI.length;\n      }\n    }\n    else {\n      this._lineMode = true;\n      this._writeQuad = this._writeQuadLine;\n    }\n  }\n\n  // ## Private methods\n\n  // ### Whether the current graph is the default graph\n  get _inDefaultGraph() {\n    return DEFAULTGRAPH.equals(this._graph);\n  }\n\n  // ### `_write` writes the argument to the output stream\n  _write(string, callback) {\n    this._outputStream.write(string, 'utf8', callback);\n  }\n\n  // ### `_writeQuad` writes the quad to the output stream\n  _writeQuad(subject, predicate, object, graph, done) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // Close the previous graph and start the new one\n        this._write((this._subject === null ? '' : (this._inDefaultGraph ? '.\\n' : '\\n}\\n')) +\n                    (DEFAULTGRAPH.equals(graph) ? '' : `${this._encodeIriOrBlank(graph)} {\\n`));\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(`;\\n    ${\n                      this._encodePredicate(this._predicate = predicate)} ${\n                      this._encodeObject(object)}`, done);\n      }\n      // Different subject; write the whole quad\n      else\n        this._write(`${(this._subject === null ? '' : '.\\n') +\n                    this._encodeSubject(this._subject = subject)} ${\n                    this._encodePredicate(this._predicate = predicate)} ${\n                    this._encodeObject(object)}`, done);\n    }\n    catch (error) { done && done(error); }\n  }\n\n  // ### `_writeQuadLine` writes the quad to the output stream as a single line\n  _writeQuadLine(subject, predicate, object, graph, done) {\n    // Write the quad without prefixes\n    delete this._prefixMatch;\n    this._write(this.quadToString(subject, predicate, object, graph), done);\n  }\n\n  // ### `quadToString` serializes a quad as a string\n  quadToString(subject, predicate, object, graph) {\n    return  `${this._encodeSubject(subject)} ${\n            this._encodeIriOrBlank(predicate)} ${\n            this._encodeObject(object)\n            }${graph && graph.value ? ` ${this._encodeIriOrBlank(graph)} .\\n` : ' .\\n'}`;\n  }\n\n  // ### `quadsToString` serializes an array of quads as a string\n  quadsToString(quads) {\n    return quads.map(t => {\n      return this.quadToString(t.subject, t.predicate, t.object, t.graph);\n    }).join('');\n  }\n\n  // ### `_encodeSubject` represents a subject\n  _encodeSubject(entity) {\n    return entity.termType === 'Quad' ?\n      this._encodeQuad(entity) : this._encodeIriOrBlank(entity);\n  }\n\n  // ### `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity) {\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && (entity.value in this._lists))\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri))\n      iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    return !prefixMatch ? `<${iri}>` :\n           (!prefixMatch[1] ? iri : this._prefixIRIs[prefixMatch[1]] + prefixMatch[2]);\n  }\n\n  // ### `_encodeLiteral` represents a literal\n  _encodeLiteral(literal) {\n    // Escape special characters\n    let value = literal.value;\n    if (escape.test(value))\n      value = value.replace(escapeAll, characterReplacer);\n\n    // Write a language-tagged literal\n    if (literal.language)\n      return `\"${value}\"@${literal.language}`;\n\n    // Write dedicated literals per data type\n    if (this._lineMode) {\n      // Only abbreviate strings in N-Triples or N-Quads\n      if (literal.datatype.value === xsd.string)\n        return `\"${value}\"`;\n    }\n    else {\n      // Use common datatype abbreviations in Turtle or TriG\n      switch (literal.datatype.value) {\n      case xsd.string:\n        return `\"${value}\"`;\n      case xsd.boolean:\n        if (value === 'true' || value === 'false')\n          return value;\n        break;\n      case xsd.integer:\n        if (/^[+-]?\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.decimal:\n        if (/^[+-]?\\d*\\.\\d+$/.test(value))\n          return value;\n        break;\n      case xsd.double:\n        if (/^[+-]?(?:\\d+\\.\\d*|\\.?\\d+)[eE][+-]?\\d+$/.test(value))\n          return value;\n        break;\n      }\n    }\n\n    // Write a regular datatyped literal\n    return `\"${value}\"^^${this._encodeIriOrBlank(literal.datatype)}`;\n  }\n\n  // ### `_encodePredicate` represents a predicate\n  _encodePredicate(predicate) {\n    return predicate.value === rdf.type ? 'a' : this._encodeIriOrBlank(predicate);\n  }\n\n  // ### `_encodeObject` represents an object\n  _encodeObject(object) {\n    switch (object.termType) {\n    case 'Quad':\n      return this._encodeQuad(object);\n    case 'Literal':\n      return this._encodeLiteral(object);\n    default:\n      return this._encodeIriOrBlank(object);\n    }\n  }\n\n  // ### `_encodeQuad` encodes an RDF* quad\n  _encodeQuad({ subject, predicate, object, graph }) {\n    return `<<${\n      this._encodeSubject(subject)} ${\n      this._encodePredicate(predicate)} ${\n      this._encodeObject(object)}${\n      isDefaultGraph(graph) ? '' : ` ${this._encodeIriOrBlank(graph)}`}>>`;\n  }\n\n  // ### `_blockedWrite` replaces `_write` after the writer has been closed\n  _blockedWrite() {\n    throw new Error('Cannot write because the writer has been closed.');\n  }\n\n  // ### `addQuad` adds the quad to the output stream\n  addQuad(subject, predicate, object, graph, done) {\n    // The quad was given as an object, so shift parameters\n    if (object === undefined)\n      this._writeQuad(subject.subject, subject.predicate, subject.object, subject.graph, predicate);\n    // The optional `graph` parameter was not provided\n    else if (typeof graph === 'function')\n      this._writeQuad(subject, predicate, object, DEFAULTGRAPH, graph);\n    // The `graph` parameter was provided\n    else\n      this._writeQuad(subject, predicate, object, graph || DEFAULTGRAPH, done);\n  }\n\n  // ### `addQuads` adds the quads to the output stream\n  addQuads(quads) {\n    for (let i = 0; i < quads.length; i++)\n      this.addQuad(quads[i]);\n  }\n\n  // ### `addPrefix` adds the prefix to the output stream\n  addPrefix(prefix, iri, done) {\n    const prefixes = {};\n    prefixes[prefix] = iri;\n    this.addPrefixes(prefixes, done);\n  }\n\n  // ### `addPrefixes` adds the prefixes to the output stream\n  addPrefixes(prefixes, done) {\n    // Ignore prefixes if not supported by the serialization\n    if (!this._prefixIRIs)\n      return done && done();\n\n    // Write all new prefixes\n    let hasPrefixes = false;\n    for (let prefix in prefixes) {\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string')\n        iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      if (this._subject !== null) {\n        this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n        this._subject = null, this._graph = '';\n      }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = (prefix += ':');\n      this._write(`@prefix ${prefix} <${iri}>.\\n`);\n    }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '', prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist, /[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n      this._prefixRegex = new RegExp(`^(?:${prefixList})[^\\/]*$|` +\n                                     `^(${IRIlist})([_a-zA-Z][\\\\-_a-zA-Z0-9]*)$`);\n    }\n    // End a prefix block with a newline\n    this._write(hasPrefixes ? '\\n' : '', done);\n  }\n\n  // ### `blank` creates a blank node with the given content\n  blank(predicate, object) {\n    let children = predicate, child, length;\n    // Empty blank node\n    if (predicate === undefined)\n      children = [];\n    // Blank node passed as blank(Term(\"predicate\"), Term(\"object\"))\n    else if (predicate.termType)\n      children = [{ predicate: predicate, object: object }];\n    // Blank node passed as blank({ predicate: predicate, object: object })\n    else if (!('length' in predicate))\n      children = [predicate];\n\n    switch (length = children.length) {\n    // Generate an empty blank node\n    case 0:\n      return new SerializedTerm('[]');\n    // Generate a non-nested one-triple blank node\n    case 1:\n      child = children[0];\n      if (!(child.object instanceof SerializedTerm))\n        return new SerializedTerm(`[ ${this._encodePredicate(child.predicate)} ${\n                                  this._encodeObject(child.object)} ]`);\n    // Generate a multi-triple or nested blank node\n    default:\n      let contents = '[';\n      // Write all triples in order\n      for (let i = 0; i < length; i++) {\n        child = children[i];\n        // Write only the object is the predicate is the same as the previous\n        if (child.predicate.equals(predicate))\n          contents += `, ${this._encodeObject(child.object)}`;\n        // Otherwise, write the predicate and the object\n        else {\n          contents += `${(i ? ';\\n  ' : '\\n  ') +\n                      this._encodePredicate(child.predicate)} ${\n                      this._encodeObject(child.object)}`;\n          predicate = child.predicate;\n        }\n      }\n      return new SerializedTerm(`${contents}\\n]`);\n    }\n  }\n\n  // ### `list` creates a list node with the given content\n  list(elements) {\n    const length = elements && elements.length || 0, contents = new Array(length);\n    for (let i = 0; i < length; i++)\n      contents[i] = this._encodeObject(elements[i]);\n    return new SerializedTerm(`(${contents.join(' ')})`);\n  }\n\n  // ### `end` signals the end of the output stream\n  end(done) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.\\n' : '\\n}\\n');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone = done && ((error, result) => { singleDone = null, done(error, result); });\n    if (this._endStream) {\n      try { return this._outputStream.end(singleDone); }\n      catch (error) { /* error closing stream */ }\n    }\n    singleDone && singleDone();\n  }\n}\n\n// Replaces a character by its escaped version\nfunction characterReplacer(character) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = ((character.charCodeAt(0) - 0xD800) * 0x400 +\n                 character.charCodeAt(1) + 0x2400).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n\nfunction escapeRegex(regex) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n","// **N3Util** provides N3 utility functions.\n\nimport N3DataFactory from './N3DataFactory';\n\n// Tests whether the given term represents an IRI\nexport function isNamedNode(term) {\n  return !!term && term.termType === 'NamedNode';\n}\n\n// Tests whether the given term represents a blank node\nexport function isBlankNode(term) {\n  return !!term && term.termType === 'BlankNode';\n}\n\n// Tests whether the given term represents a literal\nexport function isLiteral(term) {\n  return !!term && term.termType === 'Literal';\n}\n\n// Tests whether the given term represents a variable\nexport function isVariable(term) {\n  return !!term && term.termType === 'Variable';\n}\n\n// Tests whether the given term represents the default graph\nexport function isDefaultGraph(term) {\n  return !!term && term.termType === 'DefaultGraph';\n}\n\n// Tests whether the given quad is in the default graph\nexport function inDefaultGraph(quad) {\n  return isDefaultGraph(quad.graph);\n}\n\n// Creates a function that prepends the given IRI to a local name\nexport function prefix(iri, factory) {\n  return prefixes({ '': iri.value || iri }, factory)('');\n}\n\n// Creates a function that allows registering and expanding prefixes\nexport function prefixes(defaultPrefixes, factory) {\n  // Add all of the default prefixes\n  const prefixes = Object.create(null);\n  for (const prefix in defaultPrefixes)\n    processPrefix(prefix, defaultPrefixes[prefix]);\n  // Set the default factory if none was specified\n  factory = factory || N3DataFactory;\n\n  // Registers a new prefix (if an IRI was specified)\n  // or retrieves a function that expands an existing prefix (if no IRI was specified)\n  function processPrefix(prefix, iri) {\n    // Create a new prefix if an IRI is specified or the prefix doesn't exist\n    if (typeof iri === 'string') {\n      // Create a function that expands the prefix\n      const cache = Object.create(null);\n      prefixes[prefix] = local => {\n        return cache[local] || (cache[local] = factory.namedNode(iri + local));\n      };\n    }\n    else if (!(prefix in prefixes)) {\n      throw new Error(`Unknown prefix: ${prefix}`);\n    }\n    return prefixes[prefix];\n  }\n  return processPrefix;\n}\n","import {Writer, DataFactory} from 'n3';\n\n// cf. https://github.com/rdfjs/N3.js/blob/520054a9fb45ef48b5b58851449942493c57dace/src/N3Writer.js#L378\n\nconst escape = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019\\ud800-\\udbff]/,\n  escapeAll = /[\"\\\\\\t\\n\\r\\b\\f\\u0000-\\u0019]|[\\ud800-\\udbff][\\udc00-\\udfff]/g,\n  escapedCharacters = {\n    '\\\\': '\\\\\\\\',\n    '\"': '\\\\\"',\n    '\\t': '\\\\t',\n    '\\n': '\\\\n',\n    '\\r': '\\\\r',\n    '\\b': '\\\\b',\n    '\\f': '\\\\f',\n  };\n\nconst DEFAULTGRAPH = DataFactory.defaultGraph();\nconst aTagAttrs = `target=\"_blank\" rel=\"noopener noreferrer\"`;\n\nexport class NanopubWriter extends Writer {\n  // Stubs for TS to use parent class props and methods\n  _lists: any;\n  _baseMatcher: any;\n  _baseLength: any;\n  _prefixRegex: any;\n  _prefixIRIs: any;\n  _inDefaultGraph: any;\n  _graph: any;\n  _subject: any;\n  _predicate: any;\n  _blockedWrite: any;\n  _outputStream: any;\n  _endStream: any;\n  _encodeSubject: any;\n  _encodePredicate: any;\n  _encodeObject: any;\n  _write: any;\n\n  // `_encodeIriOrBlank` represents an IRI or blank node\n  _encodeIriOrBlank(entity: any) {\n    // console.log(\"ENCODE!!\", entity, this._lists)\n    // A blank node or list is represented as-is\n    if (entity.termType !== 'NamedNode') {\n      // If it is a list head, pretty-print it\n      if (this._lists && entity.value in this._lists)\n        entity = this.list(this._lists[entity.value]);\n      return 'id' in entity ? entity.id : `_:${entity.value}`;\n    }\n    let iri = entity.value;\n    // Use relative IRIs if requested and possible\n    if (this._baseMatcher && this._baseMatcher.test(iri))\n      iri = iri.substr(this._baseLength);\n    // Escape special characters\n    if (escape.test(iri)) iri = iri.replace(escapeAll, characterReplacer);\n    // Try to represent the IRI as prefixed name\n    const prefixMatch = this._prefixRegex.exec(iri);\n    if (prefixMatch && !prefixMatch[2]) {\n      prefixMatch[2] = '';\n    }\n    return !prefixMatch\n      ? `<<a href=\"${iri}\" ${aTagAttrs}>${iri}</a>>`\n      : !prefixMatch[1]\n      ? iri\n      : `<a href=\"${iri}\" ${aTagAttrs}>${\n          this._prefixIRIs[prefixMatch[1]] + prefixMatch[2] || ':'\n        }</a>`;\n  }\n\n  _writeQuad(subject: any, predicate: any, object: any, graph: any, done: any) {\n    try {\n      // Write the graph's label if it has changed\n      if (!graph.equals(this._graph)) {\n        // TODO: add divs with CSS classes for head, assertion, prov, pubinfo\n        const graphStr = graph.id.toString().toLowerCase();\n        let graphLabel = 'assertion';\n        if (graphStr.endsWith('head')) graphLabel = 'head';\n        if (graphStr.endsWith('provenance') || graphStr.endsWith('prov'))\n          graphLabel = 'provenance';\n        if (graphStr.endsWith('pubinfo')) graphLabel = 'pubinfo';\n\n        // Close the previous graph and start the new one\n        this._write(\n          (this._subject === null\n            ? ''\n            : this._inDefaultGraph\n            ? '.<br/>'\n            : ' .<br/>}</div>') +\n            (DEFAULTGRAPH.equals(graph)\n              ? ''\n              : `<div class=\"nanopub-graph\" id=\"nanopub-${graphLabel}\">${this._encodeIriOrBlank(\n                  graph\n                )} {<br/>`)\n        );\n        this._graph = graph;\n        this._subject = null;\n      }\n      // Don't repeat the subject if it's the same\n      if (subject.equals(this._subject)) {\n        // Don't repeat the predicate if it's the same\n        if (predicate.equals(this._predicate))\n          this._write(`, ${this._encodeObject(object)}`, done);\n        // Same subject, different predicate\n        else\n          this._write(\n            ` ;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;${this._encodePredicate(\n              (this._predicate = predicate)\n            )} ${this._encodeObject(object)}`,\n            done\n          );\n      } else {\n        // Different subject, write the whole quad\n        this._write(\n          `${\n            (this._subject === null ? '' : ' .<br/>') +\n            `&nbsp;&nbsp;&nbsp;&nbsp;` +\n            this._encodeSubject((this._subject = subject))\n          } ${this._encodePredicate(\n            (this._predicate = predicate)\n          )} ${this._encodeObject(object)}`,\n          done\n        );\n      }\n    } catch (error) {\n      done && done(error);\n    }\n  }\n\n  override addPrefixes(prefixes: any, done: any) {\n    // Ignore prefixes if not supported by the serialization\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.<br/>' : '<br/>}<br/>');\n      (this._subject = null), (this._graph = '');\n    }\n\n    if (!this._prefixIRIs) return done && done();\n    // Write all new prefixes\n    let hasPrefixes = false;\n    // let i = 0;\n    // const enoughPrefixes = Object.keys(prefixes).length > 1\n    for (let prefix in prefixes) {\n      // if (enoughPrefixes && i === 1) {\n      //   this._write('<div class=\"nanopub-prefixes\">');\n      // }\n      let iri = prefixes[prefix];\n      if (typeof iri !== 'string') iri = iri.value;\n      hasPrefixes = true;\n      // Finish a possible pending quad\n      // if (this._subject !== null) {\n      //   this._write(this._inDefaultGraph ? '.<br/>' : '<br/>}<br/>');\n      //   this._subject = null, this._graph = '';\n      // }\n      // Store and write the prefix\n      this._prefixIRIs[iri] = prefix += ':';\n      // this._write(`@prefix ${prefix} <<a href=\"${iri}\" ${aTagAttrs}>${iri}</a>> .`);\n\n      // if (enoughPrefixes && i === 0) {\n      //   this._write('<button @click=\"${this._expandPrefixes}\" class=\"nanopub-prefixes-button\">Show all prefixes</button>');\n      // }\n      // this._write(`<br/>`);\n      // i++\n    }\n    // if (enoughPrefixes) {\n    //   this._write('</div>');\n    // }\n    // Recreate the prefix matcher\n    if (hasPrefixes) {\n      let IRIlist = '',\n        prefixList = '';\n      for (const prefixIRI in this._prefixIRIs) {\n        IRIlist += IRIlist ? `|${prefixIRI}` : prefixIRI;\n        prefixList += (prefixList ? '|' : '') + this._prefixIRIs[prefixIRI];\n      }\n      IRIlist = escapeRegex(IRIlist);\n      this._prefixRegex = new RegExp(\n        `^(?:${prefixList})[^\\/]*$|` +\n          `^(${IRIlist})([_a-zA-Z][\\\\-_a-zA-Z0-9]*)*$`\n      );\n    }\n    // End a prefix block with a newline\n    // this._write(hasPrefixes ? '' : '', done);\n  }\n\n  override end(done: any) {\n    // Finish a possible pending quad\n    if (this._subject !== null) {\n      this._write(this._inDefaultGraph ? '.<br/>' : ' .<br/>}</div>');\n      this._subject = null;\n    }\n    // Disallow further writing\n    this._write = this._blockedWrite;\n\n    // Try to end the underlying stream, ensuring done is called exactly one time\n    let singleDone =\n      done &&\n      ((error: any, result: any) => {\n        (singleDone = null), done(error, result);\n      });\n    if (this._endStream) {\n      try {\n        return this._outputStream.end(singleDone);\n      } catch (error) {\n        /* error closing stream */\n      }\n    }\n    singleDone && singleDone();\n  }\n}\n\nfunction escapeRegex(regex: any) {\n  return regex.replace(/[\\]\\/\\(\\)\\*\\+\\?\\.\\\\\\$]/g, '\\\\$&');\n}\n\nfunction characterReplacer(character: any) {\n  // Replace a single character by its escaped version\n  let result = escapedCharacters[character];\n  if (result === undefined) {\n    // Replace a single character with its 4-bit unicode escape sequence\n    if (character.length === 1) {\n      result = character.charCodeAt(0).toString(16);\n      result = '\\\\u0000'.substr(0, 6 - result.length) + result;\n    }\n    // Replace a surrogate pair with its 8-bit unicode escape sequence\n    else {\n      result = (\n        (character.charCodeAt(0) - 0xd800) * 0x400 +\n        character.charCodeAt(1) +\n        0x2400\n      ).toString(16);\n      result = '\\\\U00000000'.substr(0, 10 - result.length) + result;\n    }\n  }\n  return result;\n}\n","import {LitElement, html, css} from 'lit';\nimport {customElement, property, state} from 'lit/decorators.js';\nimport {when} from 'lit/directives/when.js';\nimport {unsafeHTML} from 'lit/directives/unsafe-html.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\nimport {Parser, Quad} from 'n3';\nimport {NanopubWriter} from './n3-writer';\n\nconst npColor = {\n  head: css`#e8e8e8`,\n  assertion: css`#99ccff`,\n  provenance: css`#f3a08c`,\n  pubinfo: css`#ffff66`,\n  error: css`#f88b80`,\n  grey: css`#d1d1d1`,\n};\n\n/**\n * A component to display a Nanopublication.\n */\n@customElement('nanopub-display')\nexport class NanopubDisplay extends LitElement {\n  static override styles = css`\n    :host {\n      font-family: monaco, monospace;\n      font-size: 11pt;\n      color: #444;\n      display: flex;\n      height: 100%;\n      width: 100%;\n      word-break: break-all;\n      margin-bottom: 8px;\n    }\n    a {\n      color: #000;\n      text-decoration: none;\n    }\n    a:hover {\n      color: #666;\n    }\n    .nanopub {\n      height: 100%;\n      padding: 8px;\n      border-radius: 8px;\n      border: solid;\n      border-width: 1px;\n    }\n    .nanopub-graph {\n      padding: 8px;\n      margin-top: 8px;\n      border-radius: 8px;\n    }\n    #nanopub-prefixes {\n      display: none;\n    }\n    #nanopub-head {\n      display: none;\n      background: ${npColor.head};\n    }\n    #nanopub-assertion {\n      background: ${npColor.assertion};\n    }\n    #nanopub-provenance {\n      background: ${npColor.provenance};\n    }\n    #nanopub-pubinfo {\n      background: ${npColor.pubinfo};\n    }\n    .display-checklist {\n      font-family: sans-serif;\n      float: right;\n      font-size: 9pt;\n      background: ${npColor.head};\n      border-radius: 7px;\n      text-align: center;\n    }\n    .display-checklist .anchor-display-checklist {\n      position: relative;\n      display: inline-block;\n      text-decoration: none;\n      padding: 3px 8px;\n      border-radius: 7px;\n      cursor: help;\n    }\n    .display-checklist .anchor-display-checklist:hover {\n      background: ${npColor.grey};\n    }\n    .display-checklist-wrapper {\n      z-index: 1;\n      position: absolute;\n      margin-top: 1px;\n    }\n    .display-checklist ul.items {\n      position: relative;\n      min-width: 100px;\n      text-align: left;\n      width: max-content;\n      padding: 2px;\n      margin: 0;\n      border: 1px solid #ccc;\n      border-radius: 7px;\n      background: #fff;\n    }\n    .display-checklist ul.items li {\n      list-style: none;\n      margin-right: 8px;\n    }\n    .display-checklist label,\n    li,\n    input[type='checkbox'] {\n      cursor: pointer;\n    }\n  `;\n\n  /**\n   * The URL of the nanopublication to display\n   */\n  @property({type: String})\n  url = '';\n  /**\n   * The RDF string of the nanopublication to display. Will be downloaded from URL if not provided.\n   */\n  @property({type: String})\n  rdf = '';\n\n  /**\n   * Display the prefixes section, or not\n   */\n  @property({type: Boolean})\n  displayPrefixes = false;\n  /**\n   * Display the Head graph section, or not\n   */\n  @property({type: Boolean})\n  displayHead = false;\n  /**\n   * Display the PubInfo graph section, or not\n   */\n  @property({type: Boolean})\n  displayPubinfo = true;\n  /**\n   * Display the Provenance graph section, or not\n   */\n  @property({type: Boolean})\n  displayProvenance = true;\n  /**\n   * Display the Assertion graph section, or not\n   */\n  @property({type: Boolean})\n  displayAssertion = true;\n\n  /**\n   * Hide the PubInfo graph by default\n   */\n  @property({type: Boolean})\n  hidePubinfo = false;\n  /**\n   * Hide the Provenance graph by default\n   */\n  @property({type: Boolean})\n  hideProvenance = false;\n  /**\n   * Hide the Assertion graph by default\n   */\n  @property({type: Boolean})\n  hideAssertion = false;\n\n  /**\n   * Disable the button to change which sections of the nanopub are displayed\n   */\n  @property({type: Boolean})\n  disableDisplayButton = false;\n\n  /**\n   * Boolean to know if the window to change which sections of the nanopub are displayed is opened\n   */\n  @state()\n  showDisplayOptions = false;\n  /**\n   * The HTML generated from the RDF to display the nanopub\n   */\n  @state()\n  html_rdf?: any;\n  /**\n   * A dictionary with the prefixes and namespaces used in the nanopub\n   */\n  @state()\n  prefixes?: any;\n\n  /**\n   * Error message to show if there is a problem displaying the nanopub\n   */\n  @state()\n  error?: string;\n\n  /**\n   * Fetch the Nanopub if needed, parse the RDF TRiG using n3.js,\n   * and generate the HTML to represent the nanopub\n   */\n  override async connectedCallback() {\n    super.connectedCallback();\n\n    if (!this.url && !this.rdf) {\n      this.error = `⚠️ No nanopublication has been provided, use the \"url\" or \"rdf\"\n        attribute to provide the URL, or RDF in the TRiG format, of the nanopublication.`;\n    }\n\n    if (!this.error && this.url && !this.rdf) {\n      if (\n        this.url.startsWith('https://purl.org/np/') &&\n        !this.url.endsWith('.trig')\n      ) {\n        this.url = this.url + '.trig';\n      }\n      try {\n        const response = await fetch(this.url);\n        this.rdf = await response.text();\n      } catch (error) {\n        this.error = `⚠️ Issue fetching the nanopublication RDF at ${this.url}. ${error}`;\n      }\n    }\n\n    // Parse the RDF with n3.js\n    if (!this.error && this.rdf) {\n      const parser = new Parser();\n      const writer = new NanopubWriter(null, {format: 'application/trig'});\n      const quadList: Quad[] = [];\n      parser.parse(this.rdf, (error: any, quad: Quad, prefixes: any): any => {\n        if (error) {\n          this.error = `⚠️ Issue parsing the nanopublication RDF with n3.js, make sure it is in the TRiG format. ${error}`;\n          return null;\n        }\n        if (quad) {\n          quadList.push(quad);\n        } else {\n          this.prefixes = {\n            this: prefixes['this'],\n            sub: prefixes['sub'],\n            ...prefixes,\n          };\n          writer.addPrefixes(this.prefixes, null);\n          // Add the quads to the writer after the prefixes\n          quadList.map((addQuad: Quad) => {\n            writer.addQuad(addQuad);\n          });\n          writer.end((_error: any, result: string) => {\n            this.html_rdf = unsafeHTML(result);\n            // this.html_rdf = html`${result}`\n            setTimeout(() => {\n              // Timeout 0 makes sure the div are loaded before updating the displayed sections\n              // TODO: use lifecycle firstUpdated() or updated()? https://lit.dev/docs/components/lifecycle/#reactive-update-cycle\n              this._applyDisplay('displayPrefixes');\n              this._applyDisplay('displayHead');\n              if (this.hidePubinfo) this.displayPubinfo = false;\n              this._applyDisplay('displayPubinfo');\n              if (this.hideProvenance) this.displayProvenance = false;\n              this._applyDisplay('displayProvenance');\n              if (this.hideAssertion) this.displayAssertion = false;\n              this._applyDisplay('displayAssertion');\n            }, 0);\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * Apply display described in the state to a nanopub section in the HTML\n   */\n  _applyDisplay(displayProp: string) {\n    const displayLabel = displayProp.substring(7).toLowerCase();\n    const ele: HTMLElement | null = this.renderRoot.querySelector(\n      `#nanopub-${displayLabel}`\n    );\n    if (ele) {\n      ele.style.display = this[displayProp] ? 'inherit' : 'none';\n    }\n  }\n\n  /**\n   * Switch display of a nanopub section, called when checkbox clicked\n   */\n  _switchDisplay(displayProp: string) {\n    this[displayProp] = !this[displayProp];\n    this._applyDisplay(displayProp);\n  }\n\n  /**\n   * Open the dropdown window to select which nanopub section to display\n   */\n  _openDisplayOptions() {\n    this.showDisplayOptions = !this.showDisplayOptions;\n    if (window && this.showDisplayOptions) {\n      window.addEventListener('click', this._handleClickOut);\n    }\n  }\n\n  /**\n   * Close the display selection dropdown window if click outside of it\n   */\n  _handleClickOut = (e: any) => {\n    const ele: HTMLElement | null =\n      this.renderRoot.querySelector(`.display-checklist`);\n    if (window && !ele?.contains(e.originalTarget)) {\n      this.showDisplayOptions = false;\n      window.removeEventListener('click', this._handleClickOut);\n    }\n  };\n\n  override render() {\n    return html`\n      <div\n        class=\"nanopub\"\n        style=${styleMap({\n          'background-color': this.error ? npColor.error.toString() : 'inherit',\n        })}\n      >\n        ${when(this.prefixes, () => {\n          return html` @prefix ${Object.keys(this.prefixes)[0]} <<a\n              href=\"${this.prefixes[Object.keys(this.prefixes)[0]]}\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              >${this.prefixes[Object.keys(this.prefixes)[0]]}</a\n            >> .\n            ${!this.disableDisplayButton\n              ? html`<div class=\"display-checklist\" tabindex=\"100\">\n                  <span\n                    class=\"anchor-display-checklist\"\n                    @click=\"${() => this._openDisplayOptions()}\"\n                    @touchstart=\"${() => this._openDisplayOptions()}\"\n                  >\n                    ${displayIcon}\n                    ${this.showDisplayOptions\n                      ? html`Select the sections to display`\n                      : html``}\n                  </span>\n                  ${this.showDisplayOptions\n                    ? html`<div class=\"display-checklist-wrapper\">\n                        <ul class=\"items\" id=\"display-checklist-items\">\n                          <li\n                            id=\"displayPrefixes\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayPrefixes\"\n                                .checked=${this.displayPrefixes}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display prefixes\n                            </label>\n                          </li>\n                          <li\n                            id=\"displayHead\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayHead\"\n                                .checked=${this.displayHead}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display Head graph\n                            </label>\n                          </li>\n                          <li\n                            id=\"displayAssertion\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayAssertion\"\n                                .checked=${this.displayAssertion}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display Assertion graph\n                            </label>\n                          </li>\n                          <li\n                            id=\"displayProvenance\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayProvenance\"\n                                .checked=${this.displayProvenance}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display Provenance graph\n                            </label>\n                          </li>\n                          <li\n                            id=\"displayPubinfo\"\n                            @click=${(e: any) =>\n                              this._switchDisplay(e.target.id)}\n                          >\n                            <label\n                              ><input\n                                type=\"checkbox\"\n                                value=\"displayPubinfo\"\n                                .checked=${this.displayPubinfo}\n                                @click=${(e: any) =>\n                                  this._switchDisplay(e.target.value)}\n                              />\n                              Display PubInfo graph\n                            </label>\n                          </li>\n                        </ul>\n                      </div>`\n                    : html``}\n                </div>`\n              : html``}\n            <br />\n\n            <div id=\"nanopub-prefixes\">\n              ${Object.keys(this.prefixes).map((prefix, i) => {\n                if (i === 0) {\n                  return html``;\n                }\n                return html`\n                  @prefix ${prefix} <<a\n                    href=\"${this.prefixes[prefix]}\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >${this.prefixes[prefix]}</a\n                  >> .\n                  <br />\n                `;\n              })}\n            </div>`;\n        })}\n        ${this.html_rdf\n          ? html`${this.html_rdf}`\n          : this.error\n          ? html`${this.error}`\n          : html`Loading...`}\n      </div>\n    `;\n  }\n}\n\nconst displayIcon = html`<svg\n  xmlns=\"http://www.w3.org/2000/svg\"\n  height=\"16\"\n  width=\"16\"\n  viewBox=\"0 -80 1000 1000\"\n>\n  <path\n    d=\"M480.118 726Q551 726 600.5 676.382q49.5-49.617 49.5-120.5Q650 485 600.382 435.5q-49.617-49.5-120.5-49.5Q409 386 359.5 435.618q-49.5 49.617-49.5 120.5Q310 627 359.618 676.5q49.617 49.5 120.5 49.5Zm-.353-58Q433 668 400.5 635.265q-32.5-32.736-32.5-79.5Q368 509 400.735 476.5q32.736-32.5 79.5-32.5Q527 444 559.5 476.735q32.5 32.736 32.5 79.5Q592 603 559.265 635.5q-32.736 32.5-79.5 32.5ZM480 856q-146 0-264-83T40 556q58-134 176-217t264-83q146 0 264 83t176 217q-58 134-176 217t-264 83Zm0-300Zm-.169 240Q601 796 702.5 730.5 804 665 857 556q-53-109-154.331-174.5-101.332-65.5-222.5-65.5Q359 316 257.5 381.5 156 447 102 556q54 109 155.331 174.5 101.332 65.5 222.5 65.5Z\"\n  />\n</svg>`;\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'nanopub-display': NanopubDisplay;\n  }\n}\n\n// declare namespace JSX {\n//   interface IntrinsicElements {\n//       \"nanopub-display\": React.DetailedHTMLProps<\n//           React.HTMLAttributes<HTMLElement>,\n//           HTMLElement\n//       > & {\n//           url?: string;\n//           rdf?: string;\n//       };\n//   }\n// }\n\ndeclare namespace LocalJSX {\n  interface NanopubDisplay {\n    /**\n     * The URL\n     */\n    url?: string;\n    /**\n     * The RDF\n     */\n    rdf?: string;\n  }\n  interface IntrinsicElements {\n    'nanopub-display': NanopubDisplay;\n  }\n}\nexport {LocalJSX as JSX};\n\n// declare module \"@stencil/core\" {\n//   export namespace JSX {\n//       interface IntrinsicElements {\n//           \"my-component\": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;\n//       }\n//   }\n// }\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nfunction n(n,o,r){return n?o():null==r?void 0:r()}export{n as when};\n//# sourceMappingURL=when.js.map\n"],"names":["t","window","e","ShadowRoot","ShadyCSS","nativeShadow","Document","prototype","CSSStyleSheet","s","Symbol","n","WeakMap","o$4","constructor","this","_$cssResult$","Error","cssText","styleSheet","o","length","get","replaceSync","set","toString","i","reduce","c","cssRules","r","trustedTypes","h","emptyScript","reactiveElementPolyfillSupport","toAttribute","Boolean","Object","Array","JSON","stringify","fromAttribute","Number","parse","a","l","attribute","type","String","converter","reflect","hasChanged","d$1","HTMLElement","super","_$Ei","Map","isUpdatePending","hasUpdated","_$El","u","static","finalize","push","observedAttributes","elementProperties","forEach","_$Ep","_$Ev","state","noAccessor","hasOwnProperty","getPropertyDescriptor","defineProperty","requestUpdate","configurable","enumerable","finalized","getPrototypeOf","properties","getOwnPropertyNames","getOwnPropertySymbols","createProperty","elementStyles","finalizeStyles","styles","isArray","Set","flat","reverse","unshift","toLowerCase","_$E_","Promise","enableUpdating","_$AL","_$Eg","addController","_$ES","renderRoot","isConnected","hostConnected","call","removeController","splice","indexOf","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","adoptedStyleSheets","map","document","createElement","litNonce","setAttribute","textContent","appendChild","connectedCallback","disconnectedCallback","hostDisconnected","attributeChangedCallback","_$AK","_$EO","removeAttribute","getPropertyOptions","has","_$EC","_$Ej","async","reject","scheduleUpdate","performUpdate","shouldUpdate","willUpdate","hostUpdate","update","_$Ek","_$AE","hostUpdated","firstUpdated","updated","updateComplete","getUpdateComplete","d","mode","ReactiveElement","reactiveElementVersions","createPolicy","createHTML","Math","random","slice","createComment","v","f","_","RegExp","m","p","$","y","_$litType$","strings","values","x","for","b","T","A","createTreeWalker","C","parts","g","lastIndex","exec","test","startsWith","E","el","currentNode","content","firstChild","remove","append","childNodes","nextNode","nodeType","hasAttributes","getAttributeNames","endsWith","getAttribute","split","index","name","ctor","M","k","H","S","tagName","data","innerHTML","P","_$Co","_$Cl","_$litDirective$","_$AO","_$AT","_$AS","V","_$AN","_$AD","_$AM","parentNode","_$AU","creationScope","importNode","N","nextSibling","I","_$AI","_$AH","_$AA","_$AB","options","_$Cm","startNode","endNode","_$AR","iterator","O","insertBefore","createTextNode","_$AC","_$AP","setConnected","element","fill","j","arguments","R","capture","once","passive","removeEventListener","addEventListener","handleEvent","host","z","litHtmlPolyfillSupport","litHtmlVersions","renderOptions","_$Do","renderBefore","render","_$litPart$","_$litElement$","globalThis","litElementHydrateSupport","LitElement","litElementPolyfillSupport","litElementVersions","kind","descriptor","finisher","key","placement","originalKey","initializer","HTMLSlotElement","assignedElements","i$1","_$Ct","_$Ci","it","directiveName","_t","raw","resultType","keys","replace","style","vt","add","delete","includes","removeProperty","setProperty","RDF","XSD","SWAP","namespaces","xsd","decimal","boolean","double","integer","string","rdf","nil","first","rest","langString","owl","sameAs","forSome","forAll","log","implies","promise","queueMicrotask_1","queueMicrotask","bind","global","cb","resolve","then","catch","err","setTimeout","escapeSequence","escapeReplacements","illegalIriChars","lineModeRegExps","_iri","_unescapedIri","_simpleQuotedString","_langcode","_blank","_newline","_comment","_whitespace","_endOfFile","invalidRegExp","N3Lexer","_simpleApostropheString","_prefix","_prefixed","_variable","_number","_boolean","_keyword","_sparqlKeyword","_shortPredicates","_lineMode","lineMode","_n3Mode","n3","_comments","comments","_literalClosingPos","_tokenizeToEnd","callback","inputFinished","input","_input","currentLineLength","whiteSpaceMatch","comment","emitToken","_line","substr","line","firstChar","value","prefix","match","matchLength","inconclusive","_previousMarker","_unescape","reportSyntaxError","_parseLiteral","toUpperCase","token","previousToken","start","end","self","_syntaxError","item","invalid","replaced","sequence","unicode4","unicode8","escapedChar","fromCharCode","parseInt","charCode","opening","openingLength","closingPos","max","backslashCount","substring","lines","issue","context","_readStartingBom","tokenize","tokens","error","_pendingBuffer","setEncoding","on","Buffer","concat","DEFAULTGRAPH","_blankNodeCounter","DataFactory","namedNode","iri","NamedNode","blankNode","BlankNode","variable","Variable","literal","languageOrDataType","Literal","datatype","isFinite","isInteger","isNaN","defaultGraph","quad","triple","DataFactory$1","Term","id","equals","other","termType","hashCode","toJSON","lastIndexOf","language","atPos","datatypeString","dtPos","char","Quad","subject","predicate","object","graph","_subject","_predicate","_object","_graph","blankNodePrefix","N3Parser","_contextStack","_setBase","baseIRI","factory","initDataFactory","format","isTurtle","isTriG","isNTriples","isNQuads","isN3","isLineMode","_supportsNamedGraphs","_readPredicateOrNamedGraph","_readPredicate","_supportsQuads","_supportsRDFStar","_resolveRelativeIRI","_blankNodePrefix","_lexer","lexer","_explicitQuantifiers","explicitQuantifiers","fragmentPos","_base","_basePath","_baseRoot","_baseScheme","_saveContext","n3Mode","inverse","_inversePredicate","blankPrefix","_prefixes","quantified","_quantified","create","_restoreContext","pop","_error","_readInTopContext","_callback","_sparqlStyle","_readPrefix","_readBaseIRI","_readSubject","_readNamedGraphLabel","_readEntity","quantifier","_resolveIRI","_namedNode","_blankNode","_readBlankNodeHead","RDF_NIL","_readListItem","_readPunctuation","N3_FORSOME","_quantifier","_readQuantifierList","N3_FORALL","_literalValue","_completeSubjectLiteral","_literal","_getPathReader","ABBREVIATIONS","_readBlankNodeTail","_readObject","_readDataTypeOrLang","_getContextEndReader","_readGraph","_readBlankNodePunctuation","_emit","empty","_readPredicateAfterBlank","list","next","previousList","stack","parent","RDF_FIRST","_readListItemDataTypeOrLang","RDF_REST","_completeObjectLiteral","_completeLiteral","listItem","completed","_readCallback","_readFormulaTail","inversePredicate","_readQuadPunctuation","_readPrefixIRI","prefixNode","_prefixCallback","_readDeclarationPunctuation","_readNamedGraphBlankLabel","entity","QUANTIFIERS_GRAPH","_readQuantifierPunctuation","afterPath","_afterPath","_readPath","_readForwardPath","_readBackwardPath","_readRDFStarTailOrGraph","_readRDFStarTail","_quad","contextStack","message","noop","_removeDotSegments","result","pathStart","segmentStart","quadCallback","prefixCallback","quads","every","parser","N3DataFactory","escape","escapeAll","escapedCharacters","SerializedTerm","N3Writer","outputStream","_prefixRegex","write","_lists","lists","_outputStream","_endStream","output","chunk","encoding","done","_writeQuad","_writeQuadLine","_prefixIRIs","prefixes","addPrefixes","_baseMatcher","escapeRegex","_baseLength","_inDefaultGraph","_write","_encodeIriOrBlank","_encodeObject","_encodePredicate","_encodeSubject","_prefixMatch","quadToString","quadsToString","join","_encodeQuad","characterReplacer","prefixMatch","_encodeLiteral","term","isDefaultGraph","_blockedWrite","addQuad","addQuads","addPrefix","hasPrefixes","IRIlist","prefixList","prefixIRI","blank","children","child","contents","elements","singleDone","character","charCodeAt","regex","aTagAttrs","NanopubWriter","Writer","graphStr","graphLabel","npColor","head","css","assertion","provenance","pubinfo","grey","NanopubDisplay","url","displayPrefixes","displayHead","displayPubinfo","displayProvenance","displayAssertion","hidePubinfo","hideProvenance","hideAssertion","disableDisplayButton","showDisplayOptions","_handleClickOut","ele","querySelector","contains","originalTarget","response","fetch","text","Parser","writer","quadList","sub","html_rdf","unsafeHTML","_applyDisplay","displayProp","displayLabel","display","_switchDisplay","_openDisplayOptions","html","styleMap","when","displayIcon","target","__decorateClass","property","customElements","define","customElement"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,20]}